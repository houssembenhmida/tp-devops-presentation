{"version":3,"file":"angular-async-local-storage.umd.min.js","sources":["../../out-tsc/lib/src/module.ts","../../out-tsc/lib/src/service/databases/async-local-database.ts","../../out-tsc/lib/src/service/databases/indexeddb-database.ts","../../out-tsc/lib/src/service/databases/localstorage-database.ts","../../out-tsc/lib/src/service/databases/mock-local-database.ts","../../out-tsc/lib/src/service/validation/json-validator.ts","../../out-tsc/lib/src/service/lib.service.ts"],"sourcesContent":["import { NgModule, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { JSONValidator } from './service/validation/json-validator';\nimport { AsyncLocalStorage } from './service/lib.service';\nimport { AsyncLocalDatabase } from './service/databases/async-local-database';\nimport { IndexedDBDatabase } from './service/databases/indexeddb-database';\nimport { LocalStorageDatabase } from './service/databases/localstorage-database';\nimport { MockLocalDatabase } from './service/databases/mock-local-database';\n\nexport function databaseFactory(platformId: Object) {\n\n  if (isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {\n\n    /* Try with IndexedDB in modern browsers */\n    return new IndexedDBDatabase();\n\n  } else if (isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {\n\n    /* Try with localStorage in old browsers (IE9) */\n    return new LocalStorageDatabase();\n\n  } else {\n\n    /* Fake database for server-side rendering (Universal) */\n    return new MockLocalDatabase();\n\n  }\n\n}\n\n@NgModule({\n  providers: [\n    JSONValidator,\n    {\n      provide: AsyncLocalDatabase,\n      useFactory: databaseFactory,\n      deps: [PLATFORM_ID]\n    },\n    AsyncLocalStorage,\n  ]\n})\nexport class AsyncLocalStorageModule {}\n","import { Observable } from 'rxjs/Observable';\n\nexport abstract class AsyncLocalDatabase {\n\n  abstract getItem<T = any>(key: string): Observable<T | null>;\n  abstract setItem(key: string, data: any): Observable<boolean>;\n  abstract removeItem(key: string): Observable<boolean>;\n  abstract clear(): Observable<boolean>;\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { map, mergeMap, first } from 'rxjs/operators';\nimport { fromEvent as observableFromEvent }  from 'rxjs/observable/fromEvent';\nimport { of as observableOf }  from 'rxjs/observable/of';\nimport { _throw as observableThrow } from 'rxjs/observable/throw';\nimport { race as observableRace }  from 'rxjs/observable/race';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n@Injectable()\nexport class IndexedDBDatabase extends AsyncLocalDatabase {\n\n  /**\n   * IndexedDB database name for local storage\n   */\n  protected readonly dbName = 'ngStorage';\n  /**\n   * IndexedDB object store name for local storage\n   */\n  protected readonly objectStoreName = 'localStorage';\n  /**\n   * IndexedDB key path name for local storage (where an item's key will be stored)\n   */\n  protected readonly keyPath = 'key';\n  /**\n   * IndexedDB data path name for local storage (where items' value will be stored)\n   */\n  protected readonly dataPath = 'value';\n  /**\n   * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected database: ReplaySubject<IDBDatabase>;\n\n  /**\n   * Connects to IndexedDB\n   */\n  constructor() {\n\n    super();\n\n    /* Creating the RxJS ReplaySubject */\n    this.database = new ReplaySubject<IDBDatabase>();\n\n    /* Connecting to IndexedDB */\n    this.connect();\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string) {\n\n    /* Opening a trasaction and requesting the item in local storage */\n    return this.transaction().pipe(\n      map((transaction) => transaction.get(key)),\n      mergeMap((request) => {\n\n        /* Listening to the success event, and passing the item value if found, null otherwise */\n        const success = (observableFromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result),\n          map((result) => result && (this.dataPath in result) ? (result[this.dataPath] as T) : null)\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (observableRace(success, this.toErrorObservable(request, `getter`)) as Observable<T | null>)\n          .pipe(first());\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any) {\n\n    /* Storing null is not correctly supported by IndexedDB and unnecessary here */\n    if (data == null) {\n\n      return observableOf(true);\n\n    }\n\n    /* Opening a transaction and checking if the item already exists in local storage */\n    return this.getItem(key).pipe(\n      map((existingData) => (existingData == null) ? 'add' : 'put'),\n      mergeMap((method) => {\n\n        /* Opening a transaction */\n        return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n          let request: IDBRequest;\n\n          /* Adding or updating local storage, based on previous checking */\n          switch (method) {\n            case 'add':\n              request = transaction.add({ [this.dataPath]: data }, key);\n              break;\n            case 'put':\n            default:\n              request = transaction.put({ [this.dataPath]: data }, key);\n              break;\n          }\n\n          /* Merging success (passing true) and error events and autoclosing the observable */\n          return (observableRace(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`)) as Observable<boolean>)\n            .pipe(first());\n\n        }));\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string) {\n\n    /* Opening a transaction and checking if the item exists in local storage */\n    return this.getItem(key).pipe(\n      mergeMap((data) => {\n\n        /* If the item exists in local storage */\n        if (data != null) {\n\n          /* Opening a transaction */\n          return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n            /* Deleting the item in local storage */\n            const request = transaction.delete(key);\n\n            /* Merging success (passing true) and error events and autoclosing the observable */\n            return (observableRace(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`)) as Observable<boolean>)\n              .pipe(first());\n\n          }));\n\n        }\n\n        /* Passing true if the item does not exist in local storage */\n        return observableOf(true);\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear() {\n\n    /* Opening a transaction */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transaction) => {\n\n        /* Deleting all items from local storage */\n        const request = transaction.clear();\n\n        /* Merging success (passing true) and error events and autoclosing the observable */\n        return (observableRace(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`)) as Observable<boolean>)\n          .pipe(first());\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Connects to IndexedDB and creates the object store on first time\n   */\n  protected connect() {\n\n    /* Connecting to IndexedDB */\n    const request = indexedDB.open(this.dbName);\n\n    /* Listening the event fired on first connection, creating the object store for local storage */\n    (observableFromEvent(request, 'upgradeneeded') as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Getting the database connection */\n        const database = (event.target as IDBRequest).result as IDBDatabase;\n\n        /* Checking if the object store already exists, to avoid error */\n        if (!database.objectStoreNames.contains(this.objectStoreName)) {\n\n          /* Creating the object store for local storage */\n          database.createObjectStore(this.objectStoreName);\n\n        }\n\n      });\n\n    /* Listening the success event and converting to an RxJS Observable */\n    const success = observableFromEvent(request, 'success') as Observable<Event>;\n\n    /* Merging success and errors events */\n    (observableRace(success, this.toErrorObservable(request, `connection`)) as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Storing the database connection for further access */\n        this.database.next((event.target as IDBRequest).result as IDBDatabase);\n\n      }, (error) => {\n\n        this.database.error(error as Error);\n\n      });\n\n  }\n\n  /**\n   * Opens an IndexedDB transaction and gets the local storage object store\n   * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n   * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable\n   */\n  protected transaction(mode: 'readonly' | 'readwrite' = 'readonly') {\n\n    /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */\n    return this.database\n      .pipe(map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName)));\n\n  }\n\n  /**\n   * Transforms a IndexedDB success event in an RxJS Observable\n   * @param request The request to listen\n   * @returns A RxJS Observable with true value\n   */\n  protected toSuccessObservable(request: IDBRequest) {\n\n    /* Transforming a IndexedDB success event in an RxJS Observable with true value */\n    return (observableFromEvent(request, 'success') as Observable<Event>)\n      .pipe(map(() => true));\n\n  }\n\n  /**\n   * Transforms a IndexedDB error event in an RxJS ErrorObservable\n   * @param request The request to listen\n   * @param error Optionnal details about the error's origin\n   * @returns A RxJS ErrorObservable\n   */\n  protected toErrorObservable(request: IDBRequest, error = ``) {\n\n    /* Transforming a IndexedDB error event in an RxJS ErrorObservable */\n    return (observableFromEvent(request, 'error') as Observable<Event>)\n      .pipe(mergeMap((event) => observableThrow(new Error(`IndexedDB ${error} issue : ${request.error.message}.`))));\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { of as observableOf } from 'rxjs/observable/of';\nimport { _throw as observableThrow } from 'rxjs/observable/throw';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n@Injectable()\nexport class LocalStorageDatabase extends AsyncLocalDatabase {\n\n  /* Initializing native localStorage right now to be able to check its support on class instanciation */\n  protected localStorage = localStorage;\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<T | null> {\n\n    const unparsedData = this.localStorage.getItem(key);\n    let parsedData: T | null = null;\n\n    if (unparsedData != null) {\n\n      try {\n        parsedData = JSON.parse(unparsedData);\n      } catch (error) {\n        return observableThrow(new Error(`Invalid data in localStorage.`));\n      }\n\n    }\n\n    return observableOf(parsedData);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any) {\n\n    this.localStorage.setItem(key, JSON.stringify(data));\n\n    return observableOf(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string) {\n\n    this.localStorage.removeItem(key);\n\n    return observableOf(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear() {\n\n    this.localStorage.clear();\n\n    return observableOf(true);\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { of as observableOf } from 'rxjs/observable/of';\n\nimport { AsyncLocalDatabase } from './async-local-database';\n\n@Injectable()\nexport class MockLocalDatabase extends AsyncLocalDatabase {\n\n  protected localStorage = new Map<string, any>();\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n   getItem<T = any>(key: string) {\n\n    const rawData: T | null = this.localStorage.get(key);\n\n    return observableOf((rawData !== undefined) ? rawData : null);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any) {\n\n    this.localStorage.set(key, data);\n\n    return observableOf(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string) {\n\n    this.localStorage.delete(key);\n\n    return observableOf(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear() {\n\n    this.localStorage.clear();\n\n    return observableOf(true);\n\n  }\n\n}\n","import { JSONSchema, JSONSchemaType } from './json-schema';\n\n/**\n * @todo Add other JSON Schema validation features\n */\nexport class JSONValidator {\n\n  protected readonly simpleTypes = ['string', 'number', 'boolean', 'object'];\n\n  protected isObjectNotNull(value: any) {\n\n    return (value !== null) && (typeof value === 'object');\n\n  }\n\n  /**\n   * Validate a JSON data against a JSON Schema\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema\n   * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n   */\n  validate(data: any, schema: JSONSchema) {\n\n    if (!this.isObjectNotNull(schema)) {\n\n      throw new Error(`A schema must be an object (unlike spec, booleans are not supported to enforce strict types).`);\n\n    }\n\n    if ((!schema.hasOwnProperty('type') || schema.type === 'array' || schema.type === 'object')\n    && !schema.hasOwnProperty('properties') && !schema.hasOwnProperty('items')) {\n\n      throw new Error(`Each value must have a 'type' or 'properties' or 'items', to enforce strict types.`);\n\n    }\n\n    if (schema.hasOwnProperty('type') && !this.validateType(data, schema)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('items') && !this.validateItems(data, schema)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('properties')) {\n\n      if (schema.hasOwnProperty('required') && !this.validateRequired(data, schema)) {\n        return false;\n      }\n\n      if (!this.validateProperties(data, schema)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateProperties(data: {}, schema: JSONSchema) {\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    if (!schema.properties || !this.isObjectNotNull(schema.properties)) {\n\n      throw new Error(`'properties' must be a schema object.`);\n\n    }\n\n    /**\n     * Check if the object doesn't have more properties than expected\n     * Equivalent of additionalProperties: false\n     */\n    if (Object.keys(schema.properties).length !== Object.keys(data).length) {\n\n      return false;\n\n    }\n\n    /* Recursively validate all properties */\n    for (let property in schema.properties) {\n\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate(data[property], schema.properties[property])) {\n\n          return false;\n\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateRequired(data: {}, schema: JSONSchema) {\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    if (!Array.isArray(schema.required)) {\n\n      throw new Error(`'required' field must be an array. Note that since JSON Schema draft 6, booleans are not supported anymore.`);\n\n    }\n\n    for (let requiredProp of schema.required) {\n\n      if (typeof requiredProp !== 'string') {\n\n        throw new Error(`'required' array must contain strings only.`);\n\n      }\n\n      /* Checks if the property is present in the schema 'properties' */\n      if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {\n\n        throw new Error(`'required' properties must be described in 'properties' too.`);\n\n      }\n\n      /* Checks if the property is present in the data */\n      if (!data.hasOwnProperty(requiredProp)) {\n\n        return false;\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateType(data: any, schema: JSONSchema) {\n\n    if (Array.isArray(schema.type)) {\n\n      return this.validateTypeList(data, schema);\n\n    }\n\n    if (typeof schema.type !== 'string') {\n\n      throw new Error(`'type' must be a string (arrays of types are not supported yet).`);\n\n    }\n\n    if ((schema.type === 'null') && (data !== null)) {\n\n      return false;\n\n    }\n\n    if ((this.simpleTypes.indexOf(schema.type) !== -1) && (typeof data !== schema.type)) {\n\n      return false;\n\n    }\n\n    if ((schema.type === 'integer') && ((typeof data !== 'number') || !Number.isInteger(data))) {\n\n      return false;\n\n    }\n\n    return true;\n\n  }\n\n\n  protected validateTypeList(data: any, schema: JSONSchema) {\n\n    const types = schema.type as JSONSchemaType[];\n\n    const typesTests: boolean[] = [];\n\n    for (let type of types) {\n\n      typesTests.push(this.validateType(data, { type }));\n\n    }\n\n    return (typesTests.indexOf(true) !== -1);\n\n  }\n\n  protected validateItems(data: any[], schema: JSONSchema) {\n\n    if (!Array.isArray(data)) {\n\n      return false;\n\n    }\n\n    if (Array.isArray(schema.items)) {\n\n      return this.validateItemsList(data, schema);\n\n    }\n\n    if (!schema.items || !this.isObjectNotNull(schema.items)) {\n\n      throw new Error(`'items' must be a schema object.`);\n\n    }\n\n    for (let value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateItemsList(data: any, schema: JSONSchema) {\n\n    const items = schema.items as JSONSchema[];\n\n    if (data.length !== items.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < items.length; i += 1) {\n\n      if (!this.validate(data[i], items[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { mergeMap } from 'rxjs/operators';\nimport { _throw as observableThrow } from 'rxjs/observable/throw';\nimport { of as observableOf } from 'rxjs/observable/of';\n\nimport { AsyncLocalDatabase } from './databases/async-local-database';\nimport { JSONSchema } from './validation/json-schema';\nimport { JSONValidator } from './validation/json-validator';\n\nexport interface ALSGetItemOptions {\n  schema?: JSONSchema | null;\n}\n\n@Injectable()\nexport class AsyncLocalStorage {\n\n  protected readonly getItemOptionsDefault = {\n    schema: null\n  };\n\n  constructor(protected database: AsyncLocalDatabase, protected jsonValidator: JSONValidator) {}\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string, options: ALSGetItemOptions = this.getItemOptionsDefault) {\n\n    return this.database.getItem<T>(key).pipe(\n\n      /* Validate data upon a json schema if requested */\n      mergeMap((data) => {\n\n        if (options.schema && data !== null) {\n\n          let validation = true;\n\n          try {\n            validation = this.jsonValidator.validate(data, options.schema);\n          } catch (error) {\n            return observableThrow(error);\n          }\n\n          if (!validation) {\n            return observableThrow(new Error(`JSON invalid`));\n          }\n\n        }\n\n        return observableOf(data);\n\n      }));\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any) {\n\n    return this.database.setItem(key, data);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string) {\n\n    return this.database.removeItem(key);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear() {\n\n    return this.database.clear();\n\n  }\n\n}\n"],"names":["platformId","isPlatformBrowser","window","undefined","indexedDB","IndexedDBDatabase","localStorage","LocalStorageDatabase","MockLocalDatabase","AsyncLocalDatabase","_super","_this","database","ReplaySubject","connect","__extends","key","this","transaction","pipe","map","get","mergeMap","request","success","observableFromEvent","event","result","dataPath","observableRace","toErrorObservable","first","data","observableOf","getItem","existingData","method","add","_a","put","_b","toSuccessObservable","delete","clear","open","dbName","subscribe","objectStoreNames","contains","objectStoreName","createObjectStore","next","error","mode","objectStore","observableThrow","Error","message","Injectable","unparsedData","parsedData","JSON","parse","setItem","stringify","removeItem","Map","rawData","set","JSONValidator","value","schema","isObjectNotNull","hasOwnProperty","type","validateType","validateItems","validateRequired","validateProperties","properties","Object","keys","length","property","validate","Array","isArray","required","_i","requiredProp","validateTypeList","simpleTypes","indexOf","Number","isInteger","typesTests","types_1","push","items","validateItemsList","data_1","i","jsonValidator","AsyncLocalStorage","options","getItemOptionsDefault","validation","NgModule","providers","provide","useFactory","databaseFactory","deps","PLATFORM_ID"],"mappings":"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"}