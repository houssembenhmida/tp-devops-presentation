{"version":3,"sources":["ng://@ngx-pwa/local-storage/lib/tokens.ts","ng://@ngx-pwa/local-storage/lib/databases/localstorage-database.ts","ng://@ngx-pwa/local-storage/lib/databases/indexeddb-database.ts","ng://@ngx-pwa/local-storage/lib/databases/mock-local-database.ts","ng://@ngx-pwa/local-storage/lib/databases/local-database.ts","node_modules/tslib/tslib.es6.js","ng://@ngx-pwa/local-storage/lib/validation/json-validator.ts","ng://@ngx-pwa/local-storage/lib/lib.service.ts"],"names":["LOCAL_STORAGE_PREFIX","InjectionToken","providedIn","factory","LocalStorageDatabase","userPrefix","this","prefix","Object","defineProperty","prototype","of","localStorage","length","getItem","key","unparsedData","parsedData","JSON","parse","error","throwError","Error","setItem","data","stringify","removeItem","clear","keys","index","push","getKey","has","prefixedKey","substr","Injectable","args","Optional","type","Inject","IndexedDBDatabase","dbName","objectStoreName","keyPath","dataPath","fallback","database","ReplaySubject","connect","_this","size","transaction","pipe","mergeMap","request","count","success","fromEvent","map","event","race","toErrorObservable","first","getItemFromTransaction","transactionParam","get","result","tap","value","existingData","method","add","_a","put","_b","toSuccessObservable","delete","getAllKeys","undefined","indexedDB","open","setFallback","subscribe","objectStoreNames","contains","createObjectStore","next","mode","objectStore","message","MockLocalDatabase","Map","rawData","set","Array","from","localDatabaseFactory","platformId","isPlatformBrowser","window","LocalDatabase","useFactory","deps","PLATFORM_ID","__values","o","m","Symbol","iterator","i","call","done","JSONValidator","validate","schema","hasOwnProperty","const","enum","properties","items","validateEnum","validateType","validateItems","validateProperties","validateRequired","isObjectNotNull","property","required","tslib_1.__values","_c","requiredProp","indexOf","validateString","validateNumber","isArray","maxItems","Number","isInteger","minItems","uniqueItems","dataSet","Set","validateItemsList","data_1","data_1_1","maxLength","minLength","pattern","RegExp","test","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","LocalStorage","jsonValidator","getItemOptionsDefault","options","validation","getUnsafeItem","setItemSubscribe","removeItemSubscribe","clearSubscribe","localStorageProviders","config","provide","useValue"],"mappings":"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","sourcesContent":["import { InjectionToken, Provider } from '@angular/core';\n\nexport const LOCAL_STORAGE_PREFIX = new InjectionToken<string>('localStoragePrefix', { providedIn: 'root', factory: () => '' });\n\nexport interface LocalStorageProvidersConfig {\n\n  /** Optional prefix to avoid collision in multiple apps on same subdomain */\n  prefix?: string;\n}\n\nexport function localStorageProviders(config: LocalStorageProvidersConfig): Provider[] {\n  return [\n    config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : []\n  ];\n}\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDatabase implements LocalDatabase {\n\n  /* Initializing native localStorage right now to be able to check its support on class instanciation */\n  protected prefix = '';\n\n  get size(): Observable<number> {\n    return of(localStorage.length);\n  }\n\n  constructor(@Optional() @Inject(LOCAL_STORAGE_PREFIX) protected userPrefix: string | null = null) {\n\n    if (userPrefix) {\n      this.prefix = `${userPrefix}_`;\n    }\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<T | null> {\n\n    const unparsedData = localStorage.getItem(`${this.prefix}${key}`);\n    let parsedData: T | null = null;\n\n    if (unparsedData != null) {\n\n      try {\n        parsedData = JSON.parse(unparsedData);\n      } catch (error) {\n        return throwError(new Error(`Invalid data in localStorage.`));\n      }\n\n    }\n\n    return of(parsedData);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any): Observable<boolean> {\n\n    localStorage.setItem(`${this.prefix}${key}`, JSON.stringify(data));\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    localStorage.removeItem(`${this.prefix}${key}`);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear(): Observable<boolean> {\n\n    localStorage.clear();\n\n    return of(true);\n\n  }\n\n  keys(): Observable<string[]> {\n\n    const keys: string[] = [];\n\n    for (let index = 0; index < localStorage.length; index += 1) {\n\n      keys.push(this.getKey(index) as string);\n\n    }\n\n    return of(keys);\n\n  }\n\n  has(key: string): Observable<boolean> {\n\n    for (let index = 0; index < localStorage.length; index += 1) {\n\n      if (key === this.getKey(index))Â {\n\n        return of(true);\n\n      }\n\n    }\n\n    return of(false);\n\n  }\n\n  protected getKey(index: number): string | null {\n\n    const prefixedKey = localStorage.key(index);\n\n    if (prefixedKey !== null) {\n\n      return (this.prefix === '') ? prefixedKey : prefixedKey.substr(this.prefix.length);\n\n    }\n\n    return null;\n\n  }\n\n}\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { Observable, ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';\nimport { map, mergeMap, first, tap } from 'rxjs/operators';\n\nimport { LocalDatabase } from './local-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IndexedDBDatabase implements LocalDatabase {\n\n  /**\n   * IndexedDB database name for local storage\n   */\n  protected dbName = 'ngStorage';\n  /**\n   * IndexedDB object store name for local storage\n   */\n  protected readonly objectStoreName = 'localStorage';\n  /**\n   * IndexedDB key path name for local storage (where an item's key will be stored)\n   */\n  protected readonly keyPath = 'key';\n  /**\n   * IndexedDB data path name for local storage (where items' value will be stored)\n   */\n  protected readonly dataPath = 'value';\n  /**\n   * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection\n   * even after the connection success event happened\n   */\n  protected database: ReplaySubject<IDBDatabase>;\n  /**\n   * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),\n   * so a fallback can be needed.\n   */\n  protected fallback: LocalDatabase | null = null;\n\n  get size(): Observable<number> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.size;\n    }\n\n    return this.transaction('readonly').pipe(\n      mergeMap((transaction) => {\n\n        /* Deleting the item in local storage */\n        const request = transaction.count();\n\n        const success = (fromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result as number),\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (race(success, this.toErrorObservable(request, `length`)) as Observable<number>);\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Connects to IndexedDB\n   */\n  constructor(@Optional() @Inject(LOCAL_STORAGE_PREFIX) protected prefix: string | null = null) {\n\n    if (prefix) {\n\n      this.dbName = `${prefix}_${this.dbName}`;\n\n    }\n\n    /* Creating the RxJS ReplaySubject */\n    this.database = new ReplaySubject<IDBDatabase>();\n\n    /* Connecting to IndexedDB */\n    this.connect(prefix);\n\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string): Observable<TÂ | null> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.getItem<T>(key);\n    }\n\n    /* Opening a trasaction and requesting the item in local storage */\n    return this.getItemFromTransaction<T>(key);\n\n  }\n\n  /**\n   * Internal method to factorize the getter for getItem and setItem,\n   * the last one needing to be from a preexisting transaction\n   * @param key The item's key\n   * @param transactionParam Optional pre-existing transaction to use for the read request\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  private getItemFromTransaction<T = any>(key: string, transactionParam?: IDBObjectStore): Observable<TÂ | null> {\n\n    const transaction$ = transactionParam ? of(transactionParam) : this.transaction();\n\n    return transaction$.pipe(\n      map((transaction) => transaction.get(key)),\n      mergeMap((request) => {\n\n        /* Listening to the success event, and passing the item value if found, null otherwise */\n        const success = (fromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result),\n          map((result) => result && (this.dataPath in result) ? (result[this.dataPath] as T) : null)\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (race(success, this.toErrorObservable(request, `getter`)));\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any): Observable<boolean> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.setItem(key, data);\n    }\n\n    /* Storing null is not correctly supported by IndexedDB and unnecessary here */\n    if (data == null) {\n\n      return of(true);\n\n    }\n\n    /* Transaction must be the same for read and write, to avoid concurrency issues */\n    const transaction$ = this.transaction('readwrite');\n    let transaction: IDBObjectStore;\n\n        /* Opening a transaction */\n        return transaction$.pipe(\n          tap((value) => {\n            transaction = value;\n          }),\n          /* Check if the key already exists or not */\n          mergeMap(() => this.getItemFromTransaction(key, transaction)),\n          map((existingData) => (existingData == null) ? 'add' : 'put'),\n          mergeMap((method) => {\n\n            let request: IDBRequest;\n\n            /* Adding or updating local storage, based on previous checking */\n            switch (method) {\n              case 'add':\n                request = transaction.add({ [this.dataPath]: data }, key);\n                break;\n              case 'put':\n              default:\n                request = transaction.put({ [this.dataPath]: data }, key);\n                break;\n            }\n\n            /* Merging success (passing true) and error events and autoclosing the observable */\n            return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`)));\n\n        }),\n        first()\n      );\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.removeItem(key);\n    }\n\n    /* Opening a transaction and checking if the item exists in local storage */\n    return this.getItem(key).pipe(\n      mergeMap((data) => {\n\n        /* If the item exists in local storage */\n        if (data != null) {\n\n          /* Opening a transaction */\n          return this.transaction('readwrite').pipe(mergeMap((transaction) => {\n\n            /* Deleting the item in local storage */\n            const request = transaction.delete(key);\n\n            /* Merging success (passing true) and error events and autoclosing the observable */\n            return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`)));\n\n          }));\n\n        }\n\n        /* Passing true if the item does not exist in local storage */\n        return of(true);\n\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear(): Observable<boolean> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.clear();\n    }\n\n    /* Opening a transaction */\n    return this.transaction('readwrite').pipe(\n      mergeMap((transaction) => {\n\n        /* Deleting all items from local storage */\n        const request = transaction.clear();\n\n        /* Merging success (passing true) and error events and autoclosing the observable */\n        return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`)));\n\n      }),\n      first()\n    );\n\n  }\n\n  keys(): Observable<string[]> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.keys();\n    }\n\n    return this.transaction('readonly').pipe(\n      mergeMap((transaction) => {\n\n        /* Deleting the item in local storage */\n        const request = transaction.getAllKeys();\n\n        const success = (fromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result as string[])\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (race(success, this.toErrorObservable(request, `keys`)));\n\n      }),\n      first()\n    );\n\n  }\n\n  has(key: string): Observable<boolean> {\n\n    /* Fallback storage if set */\n    if (this.fallback) {\n      return this.fallback.has(key);\n    }\n\n    return this.transaction('readonly').pipe(\n      map((transaction) => transaction.getKey(key)),\n      mergeMap((request) => {\n\n        /* Listening to the success event, and passing the item value if found, null otherwise */\n        const success = (fromEvent(request, 'success') as Observable<Event>).pipe(\n          map((event) => (event.target as IDBRequest).result),\n          map((result) => (result !== undefined) ? true : false)\n        );\n\n        /* Merging success and errors events and autoclosing the observable */\n        return (race(success, this.toErrorObservable(request, `has`)));\n      }),\n      first()\n    );\n\n  }\n\n  /**\n   * Connects to IndexedDB and creates the object store on first time\n   */\n  protected connect(prefix: string | null = null): void {\n\n    let request: IDBOpenDBRequest;\n\n    /* Connecting to IndexedDB */\n    try {\n\n      request = indexedDB.open(this.dbName);\n\n    }Â catch (error) {\n\n      /* Fallback storage if IndexedDb connection is failing */\n      this.setFallback(prefix);\n\n      return;\n\n    }\n\n    /* Listening the event fired on first connection, creating the object store for local storage */\n    (fromEvent(request, 'upgradeneeded') as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Getting the database connection */\n        const database = (event.target as IDBRequest).result as IDBDatabase;\n\n        /* Checking if the object store already exists, to avoid error */\n        if (!database.objectStoreNames.contains(this.objectStoreName)) {\n\n          /* Creating the object store for local storage */\n          database.createObjectStore(this.objectStoreName);\n\n        }\n\n      });\n\n    /* Listening the success event and converting to an RxJS Observable */\n    const success = fromEvent(request, 'success') as Observable<Event>;\n\n    /* Merging success and errors events */\n    (race(success, this.toErrorObservable(request, `connection`)) as Observable<Event>)\n      .pipe(first())\n      .subscribe((event) => {\n\n        /* Storing the database connection for further access */\n        this.database.next((event.target as IDBRequest).result as IDBDatabase);\n\n      }, () => {\n\n        /* Fallback storage if IndexedDb connection is failing */\n        this.setFallback(prefix);\n\n      });\n\n  }\n\n  /**\n   * Opens an IndexedDB transaction and gets the local storage object store\n   * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n   * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable\n   */\n  protected transaction(mode: 'readonly' | 'readwrite' = 'readonly'): Observable<IDBObjectStore> {\n\n    /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */\n    return this.database\n      .pipe(map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName)));\n\n  }\n\n  /**\n   * Transforms a IndexedDB success event in an RxJS Observable\n   * @param request The request to listen\n   * @returns A RxJS Observable with true value\n   */\n  protected toSuccessObservable(request: IDBRequest): Observable<boolean> {\n\n    /* Transforming a IndexedDB success event in an RxJS Observable with true value */\n    return (fromEvent(request, 'success') as Observable<Event>)\n      .pipe(map(() => true));\n\n  }\n\n  /**\n   * Transforms a IndexedDB error event in an RxJS ErrorObservable\n   * @param request The request to listen\n   * @param error Optionnal details about the error's origin\n   * @returns A RxJS ErrorObservable\n   */\n  protected toErrorObservable(request: IDBRequest, error = ``): Observable<never> {\n\n    /* Transforming a IndexedDB error event in an RxJS ErrorObservable */\n    return (fromEvent(request, 'error') as Observable<Event>)\n      .pipe(\n        mergeMap(() => throwError(new Error(`IndexedDB ${error} issue : ${(request.error as DOMException).message}.`)))\n      );\n\n  }\n\n  protected setFallback(prefix: string | null): void {\n    this.fallback = new LocalStorageDatabase(prefix);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { LocalDatabase } from './local-database';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockLocalDatabase implements LocalDatabase {\n\n  protected localStorage = new Map<string, any>();\n\n  get size(): Observable<number> {\n    return of(this.localStorage.size);\n  }\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n   getItem<T = any>(key: string): Observable<T |Â null> {\n\n    const rawData: T | null = this.localStorage.get(key);\n\n    return of((rawData !== undefined) ? rawData : null);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   setItem(key: string, data: any): Observable<boolean> {\n\n    this.localStorage.set(key, data);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   removeItem(key: string): Observable<boolean> {\n\n    this.localStorage.delete(key);\n\n    return of(true);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n   clear(): Observable<boolean> {\n\n    this.localStorage.clear();\n\n    return of(true);\n\n  }\n\n  keys(): Observable<string[]> {\n\n    return of(Array.from(this.localStorage.keys()));\n\n  }\n\n  has(key: string): Observable<boolean> {\n\n    return of(this.localStorage.has(key));\n\n  }\n\n}\n","import { Injectable, PLATFORM_ID, Optional } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nimport { IndexedDBDatabase } from './indexeddb-database';\nimport { LocalStorageDatabase } from './localstorage-database';\nimport { MockLocalDatabase } from './mock-local-database';\nimport { LOCAL_STORAGE_PREFIX } from '../tokens';\n\nexport function localDatabaseFactory(platformId: Object, prefix: string | null) {\n\n  if (isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {\n\n    /* Try with IndexedDB in modern browsers */\n    return new IndexedDBDatabase(prefix);\n\n  } else if (isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {\n\n    /* Try with localStorage in old browsers (IE9) */\n    return new LocalStorageDatabase(prefix);\n\n  } else {\n\n    /* Fake database for server-side rendering (Universal) */\n    return new MockLocalDatabase();\n\n  }\n\n}\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: localDatabaseFactory,\n  deps: [\n    PLATFORM_ID,\n    [new Optional(), LOCAL_STORAGE_PREFIX]\n  ]\n})\nexport abstract class LocalDatabase {\n\n  abstract readonly size: Observable<number>;\n\n  abstract getItem<T = any>(key: string): Observable<T | null>;\n  abstract setItem(key: string, data: any): Observable<boolean>;\n  abstract removeItem(key: string): Observable<boolean>;\n  abstract clear(): Observable<boolean>;\n  abstract keys(): Observable<string[]>;\n  abstract has(key: string): Observable<boolean>;\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { JSONSchema } from './json-schema';\n\n/**\n * @todo Add other JSON Schema validation features\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JSONValidator {\n\n  /**\n   * Validate a JSON data against a JSON Schema\n   * @param data JSON data to validate\n   * @param schema Subset of JSON Schema.\n   * Types are enforced to validate everything:\n   * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.\n   * Therefore, unlike the spec, booleans are not allowed as schemas.\n   * Not all validation features are supported: just follow the interface.\n   * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n   */\n  validate(data: any, schema: JSONSchema): boolean {\n\n    /** @todo When TS 2.8, explore if this is possible with conditional types */\n    if (((!(schema.hasOwnProperty('const') && schema.const !== undefined)\n    && !(schema.hasOwnProperty('enum') && schema.enum != null) && !(schema.hasOwnProperty('type') && schema.type != null))\n    || schema.type === 'array' || schema.type === 'object')\n    && !(schema.hasOwnProperty('properties') && schema.properties != null)  && !(schema.hasOwnProperty('items') && schema.items != null)) {\n\n      throw new Error(`Each value must have a 'type' or 'properties' or 'items' or 'const' or 'enum', to enforce strict types.`);\n\n    }\n\n    if (schema.hasOwnProperty('const') && schema.const !== undefined && (data !== schema.const)) {\n      return false;\n    }\n\n    if (!this.validateEnum(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateType(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateItems(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateProperties(data, schema)) {\n      return false;\n    }\n\n    if (!this.validateRequired(data, schema)) {\n      return false;\n    }\n\n    return true;\n\n  }\n\n  protected isObjectNotNull(value: any): boolean {\n\n    return (value !== null) && (typeof value === 'object');\n\n  }\n\n  protected validateProperties(data: { [k: string]: any; }, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('properties') || (schema.properties == null)) {\n      return true;\n    }\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    /**\n     * Check if the object doesn't have more properties than expected\n     * Equivalent of additionalProperties: false\n     */\n    if (Object.keys(schema.properties).length < Object.keys(data).length) {\n\n      return false;\n\n    }\n\n    /* Recursively validate all properties */\n    for (const property in schema.properties) {\n\n      if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n\n        if (!this.validate(data[property], schema.properties[property])) {\n\n          return false;\n\n        }\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateRequired(data: {}, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('required') || (schema.required == null)) {\n      return true;\n    }\n\n    if (!this.isObjectNotNull(data)) {\n\n      return false;\n\n    }\n\n    for (const requiredProp of schema.required) {\n\n      /* Checks if the property is present in the schema 'properties' */\n      if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {\n\n        throw new Error(`'required' properties must be described in 'properties' too.`);\n\n      }\n\n      /* Checks if the property is present in the data */\n      if (!data.hasOwnProperty(requiredProp)) {\n\n        return false;\n\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateEnum(data: any, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('enum') || (schema.enum == null)) {\n      return true;\n    }\n\n    /** @todo Move to ES2016 .includes() ? */\n    return (schema.enum.indexOf(data) !== -1);\n\n  }\n\n  protected validateType(data: any, schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('type') || (schema.type == null)) {\n      return true;\n    }\n\n    switch (schema.type) {\n\n      case 'null':\n        return data === null;\n      case 'string':\n        return this.validateString(data, schema);\n      case 'number':\n      case 'integer':\n        return this.validateNumber(data, schema);\n      case 'boolean':\n        return typeof data === 'boolean';\n      case 'object':\n        return typeof data === 'object';\n      case 'array':\n        return Array.isArray(data);\n\n    }\n\n    return true;\n\n  }\n\n  protected validateItems(data: any[], schema: JSONSchema): boolean {\n\n    if (!schema.hasOwnProperty('items') || (schema.items == null)) {\n      return true;\n    }\n\n    if (!Array.isArray(data)) {\n\n      return false;\n\n    }\n\n    if (schema.hasOwnProperty('maxItems') && (schema.maxItems != null)) {\n\n      if (!Number.isInteger(schema.maxItems) || schema.maxItems < 0) {\n\n        throw new Error(`'maxItems' must be a non-negative integer.`);\n\n      }\n\n      if (data.length > schema.maxItems) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minItems') && (schema.minItems != null)) {\n\n      if (!Number.isInteger(schema.minItems) || schema.minItems < 0) {\n\n        throw new Error(`'minItems' must be a non-negative integer.`);\n\n      }\n\n      if (data.length < schema.minItems) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('uniqueItems') && (schema.uniqueItems != null)) {\n\n      if (schema.uniqueItems) {\n\n        const dataSet = new Set(data);\n\n        if (data.length !== dataSet.size) {\n          return false;\n        }\n\n      }\n\n    }\n\n    if (Array.isArray(schema.items)) {\n\n      return this.validateItemsList(data, schema);\n\n    }\n\n    for (const value of data) {\n\n      if (!this.validate(value, schema.items)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateItemsList(data: any, schema: JSONSchema): boolean {\n\n    const items = schema.items as JSONSchema[];\n\n    if (data.length !== items.length) {\n\n      return false;\n\n    }\n\n    for (let i = 0; i < items.length; i += 1) {\n\n      if (!this.validate(data[i], items[i])) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateString(data: any, schema: JSONSchema): boolean {\n\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('maxLength') && (schema.maxLength != null)) {\n\n      if (!Number.isInteger(schema.maxLength) || schema.maxLength < 0) {\n\n        throw new Error(`'maxLength' must be a non-negative integer.`);\n\n      }\n\n      if (data.length > schema.maxLength) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minLength') && (schema.minLength != null)) {\n\n      if (!Number.isInteger(schema.minLength) || schema.minLength < 0) {\n\n        throw new Error(`'minLength' must be a non-negative integer.`);\n\n      }\n\n      if (data.length < schema.minLength) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('pattern') && (schema.pattern != null)) {\n\n      const regularExpression = new RegExp(schema.pattern);\n\n      if (!regularExpression.test(data)) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n  protected validateNumber(data: any, schema: JSONSchema): boolean {\n\n    if (typeof data !== 'number') {\n      return false;\n    }\n\n    if ((schema.type === 'integer') && !Number.isInteger(data)) {\n      return false;\n    }\n\n    if (schema.hasOwnProperty('multipleOf') && (schema.multipleOf != null)) {\n\n      if (schema.multipleOf <= 0) {\n\n        throw new Error(`'multipleOf' must be a number strictly greater than 0.`);\n\n      }\n\n      if (!Number.isInteger(data / schema.multipleOf)) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('maximum') && (schema.maximum != null)) {\n\n      if (data > schema.maximum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('exclusiveMaximum') && (schema.exclusiveMaximum != null)) {\n\n      if (data >= schema.exclusiveMaximum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('minimum') && (schema.minimum != null)) {\n\n      if (data < schema.minimum) {\n        return false;\n      }\n\n    }\n\n    if (schema.hasOwnProperty('exclusiveMinimum') && (schema.exclusiveMinimum != null)) {\n\n      if (data <= schema.exclusiveMinimum) {\n        return false;\n      }\n\n    }\n\n    return true;\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { LocalDatabase } from './databases/local-database';\nimport { JSONSchema } from './validation/json-schema';\nimport { JSONValidator } from './validation/json-validator';\n\nexport interface LSGetItemOptions {\n  schema?: JSONSchema | null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorage {\n\n  /**\n   * Number of items in the storage\n   */\n  get size(): Observable<number> {\n\n    return this.database.size;\n\n  }\n\n  protected readonly getItemOptionsDefault: LSGetItemOptions = {\n    schema: null\n  };\n\n  constructor(protected database: LocalDatabase, protected jsonValidator: JSONValidator) {}\n\n  /**\n   * Gets an item value in local storage\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getItem<T = any>(key: string, options: LSGetItemOptions & { schema: JSONSchema }): Observable<T | null>;\n  getItem<T = any>(key: string, options?: LSGetItemOptions): Observable<unknown>;\n  getItem<T = any>(key: string, options = this.getItemOptionsDefault) {\n\n    return this.database.getItem<T>(key).pipe(\n\n      /* Validate data upon a json schema if requested */\n      mergeMap((data) => {\n\n        if (data === null) {\n\n          return of(null);\n\n        } else if (options.schema) {\n\n          let validation = true;\n\n          try {\n            validation = this.jsonValidator.validate(data, options.schema);\n          } catch (error) {\n            return throwError(error);\n          }\n\n          if (!validation) {\n            return throwError(new Error(`JSON invalid`));\n          }\n\n        }\n\n        return of(data as unknown);\n\n      }));\n\n  }\n\n  /**\n   * Gets an item value in local storage WITHOUT any validation.\n   * It is a convenience method for development only: do NOT use it in production code,\n   * as it can cause security issues and errors and may be removed in future versions.\n   * Use the normal .getItem() method instead.\n   * @ignore\n   * @deprecated\n   * @param key The item's key\n   * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n   */\n  getUnsafeItem<T = any>(key: string): Observable<T | null> {\n\n    return this.database.getItem<T>(key);\n\n  }\n\n  /**\n   * Sets an item in local storage\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  setItem(key: string, data: any): Observable<boolean> {\n\n    return this.database.setItem(key, data);\n\n  }\n\n  /**\n   * Deletes an item in local storage\n   * @param key The item's key\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  removeItem(key: string): Observable<boolean> {\n\n    return this.database.removeItem(key);\n\n  }\n\n  /**\n   * Deletes all items from local storage\n   * @returns An RxJS Observable to wait the end of the operation\n   */\n  clear(): Observable<boolean> {\n\n    return this.database.clear();\n\n  }\n\n  /**\n   * Get all keys stored in local storage\n   * @returns A RxJS Observable returning an array of the indexes\n   */\n  keys(): Observable<string[]> {\n\n    return this.database.keys();\n\n  }\n\n  /**\n   * Tells if a key exists in storage\n   * @returns A RxJS Observable telling if the key exists\n   */\n  has(key: string): Observable<boolean> {\n\n    return this.database.has(key);\n\n  }\n\n  /**\n   * Sets an item in local storage, and auto-subscribes\n   * @param key The item's key\n   * @param data The item's value, must NOT be null or undefined\n   */\n  setItemSubscribe(key: string, data: any): void {\n\n    this.setItem(key, data).subscribe(() => {}, () => {});\n\n  }\n\n  /**\n   * Deletes an item in local storage, and auto-subscribes\n   * @param key The item's key\n   */\n   removeItemSubscribe(key: string): void {\n\n    this.removeItem(key).subscribe(() => {}, () => {});\n\n  }\n\n  /** Deletes all items from local storage, and auto-subscribes */\n  clearSubscribe(): void {\n\n    this.clear().subscribe(() => {}, () => {});\n\n  }\n\n}\n"]}