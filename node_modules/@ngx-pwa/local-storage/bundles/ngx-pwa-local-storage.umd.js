(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-pwa/local-storage', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ngx-pwa'] = global['ngx-pwa'] || {}, global['ngx-pwa']['local-storage'] = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,i0,rxjs,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOCAL_STORAGE_PREFIX = new i0.InjectionToken('localStoragePrefix', { providedIn: 'root', factory: function () { return ''; } });
    /**
     * @param {?} config
     * @return {?}
     */
    function localStorageProviders(config) {
        return [
            config.prefix ? { provide: LOCAL_STORAGE_PREFIX, useValue: config.prefix } : []
        ];
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LocalStorageDatabase = /** @class */ (function () {
        function LocalStorageDatabase(userPrefix) {
            if (userPrefix === void 0) {
                userPrefix = null;
            }
            this.userPrefix = userPrefix;
            /* Initializing native localStorage right now to be able to check its support on class instanciation */
            this.prefix = '';
            if (userPrefix) {
                this.prefix = userPrefix + "_";
            }
        }
        Object.defineProperty(LocalStorageDatabase.prototype, "size", {
            get: /**
             * @return {?}
             */ function () {
                return rxjs.of(localStorage.length);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Gets an item value in local storage
         * @param key The item's key
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        LocalStorageDatabase.prototype.getItem = /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key) {
                /** @type {?} */
                var unparsedData = localStorage.getItem("" + this.prefix + key);
                /** @type {?} */
                var parsedData = null;
                if (unparsedData != null) {
                    try {
                        parsedData = JSON.parse(unparsedData);
                    }
                    catch (error) {
                        return rxjs.throwError(new Error("Invalid data in localStorage."));
                    }
                }
                return rxjs.of(parsedData);
            };
        /**
         * Sets an item in local storage
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorageDatabase.prototype.setItem = /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key, data) {
                localStorage.setItem("" + this.prefix + key, JSON.stringify(data));
                return rxjs.of(true);
            };
        /**
         * Deletes an item in local storage
         * @param key The item's key
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorageDatabase.prototype.removeItem = /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key) {
                localStorage.removeItem("" + this.prefix + key);
                return rxjs.of(true);
            };
        /**
         * Deletes all items from local storage
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorageDatabase.prototype.clear = /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function () {
                localStorage.clear();
                return rxjs.of(true);
            };
        /**
         * @return {?}
         */
        LocalStorageDatabase.prototype.keys = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var keys = [];
                for (var index = 0; index < localStorage.length; index += 1) {
                    keys.push(( /** @type {?} */(this.getKey(index))));
                }
                return rxjs.of(keys);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        LocalStorageDatabase.prototype.has = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                for (var index = 0; index < localStorage.length; index += 1) {
                    if (key === this.getKey(index)) {
                        return rxjs.of(true);
                    }
                }
                return rxjs.of(false);
            };
        /**
         * @protected
         * @param {?} index
         * @return {?}
         */
        LocalStorageDatabase.prototype.getKey = /**
         * @protected
         * @param {?} index
         * @return {?}
         */
            function (index) {
                /** @type {?} */
                var prefixedKey = localStorage.key(index);
                if (prefixedKey !== null) {
                    return (this.prefix === '') ? prefixedKey : prefixedKey.substr(this.prefix.length);
                }
                return null;
            };
        LocalStorageDatabase.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LocalStorageDatabase.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
            ];
        };
        /** @nocollapse */ LocalStorageDatabase.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorageDatabase_Factory() { return new LocalStorageDatabase(i0.inject(LOCAL_STORAGE_PREFIX, 8)); }, token: LocalStorageDatabase, providedIn: "root" });
        return LocalStorageDatabase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IndexedDBDatabase = /** @class */ (function () {
        /**
         * Connects to IndexedDB
         */
        function IndexedDBDatabase(prefix) {
            if (prefix === void 0) {
                prefix = null;
            }
            this.prefix = prefix;
            /**
             * IndexedDB database name for local storage
             */
            this.dbName = 'ngStorage';
            /**
             * IndexedDB object store name for local storage
             */
            this.objectStoreName = 'localStorage';
            /**
             * IndexedDB key path name for local storage (where an item's key will be stored)
             */
            this.keyPath = 'key';
            /**
             * IndexedDB data path name for local storage (where items' value will be stored)
             */
            this.dataPath = 'value';
            /**
             * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),
             * so a fallback can be needed.
             */
            this.fallback = null;
            if (prefix) {
                this.dbName = prefix + "_" + this.dbName;
            }
            /* Creating the RxJS ReplaySubject */
            this.database = new rxjs.ReplaySubject();
            /* Connecting to IndexedDB */
            this.connect(prefix);
        }
        Object.defineProperty(IndexedDBDatabase.prototype, "size", {
            get: /**
             * @return {?}
             */ function () {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.size;
                }
                return this.transaction('readonly').pipe(operators.mergeMap(function (transaction) {
                    /* Deleting the item in local storage */
                    /** @type {?} */
                    var request = transaction.count();
                    /** @type {?} */
                    var success = (( /** @type {?} */(rxjs.fromEvent(request, 'success')))).pipe(operators.map(function (event) { return ( /** @type {?} */((( /** @type {?} */(event.target))).result)); }));
                    /* Merging success and errors events and autoclosing the observable */
                    return (( /** @type {?} */(rxjs.race(success, _this.toErrorObservable(request, "length")))));
                }), operators.first());
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Gets an item value in local storage
         * @param key The item's key
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        IndexedDBDatabase.prototype.getItem = /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key) {
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.getItem(key);
                }
                /* Opening a trasaction and requesting the item in local storage */
                return this.getItemFromTransaction(key);
            };
        /**
         * Internal method to factorize the getter for getItem and setItem,
         * the last one needing to be from a preexisting transaction
         * @param key The item's key
         * @param transactionParam Optional pre-existing transaction to use for the read request
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Internal method to factorize the getter for getItem and setItem,
         * the last one needing to be from a preexisting transaction
         * @private
         * @template T
         * @param {?} key The item's key
         * @param {?=} transactionParam Optional pre-existing transaction to use for the read request
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        IndexedDBDatabase.prototype.getItemFromTransaction = /**
         * Internal method to factorize the getter for getItem and setItem,
         * the last one needing to be from a preexisting transaction
         * @private
         * @template T
         * @param {?} key The item's key
         * @param {?=} transactionParam Optional pre-existing transaction to use for the read request
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key, transactionParam) {
                var _this = this;
                /** @type {?} */
                var transaction$ = transactionParam ? rxjs.of(transactionParam) : this.transaction();
                return transaction$.pipe(operators.map(function (transaction) { return transaction.get(key); }), operators.mergeMap(function (request) {
                    /* Listening to the success event, and passing the item value if found, null otherwise */
                    /** @type {?} */
                    var success = (( /** @type {?} */(rxjs.fromEvent(request, 'success')))).pipe(operators.map(function (event) { return (( /** @type {?} */(event.target))).result; }), operators.map(function (result) { return result && (_this.dataPath in result) ? (( /** @type {?} */(result[_this.dataPath]))) : null; }));
                    /* Merging success and errors events and autoclosing the observable */
                    return (rxjs.race(success, _this.toErrorObservable(request, "getter")));
                }), operators.first());
            };
        /**
         * Sets an item in local storage
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        IndexedDBDatabase.prototype.setItem = /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key, data) {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.setItem(key, data);
                }
                /* Storing null is not correctly supported by IndexedDB and unnecessary here */
                if (data == null) {
                    return rxjs.of(true);
                }
                /* Transaction must be the same for read and write, to avoid concurrency issues */
                /** @type {?} */
                var transaction$ = this.transaction('readwrite');
                /** @type {?} */
                var transaction;
                /* Opening a transaction */
                return transaction$.pipe(operators.tap(function (value) {
                    transaction = value;
                }), 
                /* Check if the key already exists or not */
                operators.mergeMap(function () { return _this.getItemFromTransaction(key, transaction); }), operators.map(function (existingData) { return (existingData == null) ? 'add' : 'put'; }), operators.mergeMap(function (method) {
                    var _a, _b;
                    /** @type {?} */
                    var request;
                    /* Adding or updating local storage, based on previous checking */
                    switch (method) {
                        case 'add':
                            request = transaction.add((_a = {}, _a[_this.dataPath] = data, _a), key);
                            break;
                        case 'put':
                        default:
                            request = transaction.put((_b = {}, _b[_this.dataPath] = data, _b), key);
                            break;
                    }
                    /* Merging success (passing true) and error events and autoclosing the observable */
                    return (rxjs.race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "setter")));
                }), operators.first());
            };
        /**
         * Deletes an item in local storage
         * @param key The item's key
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        IndexedDBDatabase.prototype.removeItem = /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key) {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.removeItem(key);
                }
                /* Opening a transaction and checking if the item exists in local storage */
                return this.getItem(key).pipe(operators.mergeMap(function (data) {
                    /* If the item exists in local storage */
                    if (data != null) {
                        /* Opening a transaction */
                        return _this.transaction('readwrite').pipe(operators.mergeMap(function (transaction) {
                            /* Deleting the item in local storage */
                            /** @type {?} */
                            var request = transaction.delete(key);
                            /* Merging success (passing true) and error events and autoclosing the observable */
                            return (rxjs.race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "remover")));
                        }));
                    }
                    /* Passing true if the item does not exist in local storage */
                    return rxjs.of(true);
                }), operators.first());
            };
        /**
         * Deletes all items from local storage
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        IndexedDBDatabase.prototype.clear = /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function () {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.clear();
                }
                /* Opening a transaction */
                return this.transaction('readwrite').pipe(operators.mergeMap(function (transaction) {
                    /* Deleting all items from local storage */
                    /** @type {?} */
                    var request = transaction.clear();
                    /* Merging success (passing true) and error events and autoclosing the observable */
                    return (rxjs.race(_this.toSuccessObservable(request), _this.toErrorObservable(request, "clearer")));
                }), operators.first());
            };
        /**
         * @return {?}
         */
        IndexedDBDatabase.prototype.keys = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.keys();
                }
                return this.transaction('readonly').pipe(operators.mergeMap(function (transaction) {
                    /* Deleting the item in local storage */
                    /** @type {?} */
                    var request = transaction.getAllKeys();
                    /** @type {?} */
                    var success = (( /** @type {?} */(rxjs.fromEvent(request, 'success')))).pipe(operators.map(function (event) { return ( /** @type {?} */((( /** @type {?} */(event.target))).result)); }));
                    /* Merging success and errors events and autoclosing the observable */
                    return (rxjs.race(success, _this.toErrorObservable(request, "keys")));
                }), operators.first());
            };
        /**
         * @param {?} key
         * @return {?}
         */
        IndexedDBDatabase.prototype.has = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                /* Fallback storage if set */
                if (this.fallback) {
                    return this.fallback.has(key);
                }
                return this.transaction('readonly').pipe(operators.map(function (transaction) { return transaction.getKey(key); }), operators.mergeMap(function (request) {
                    /* Listening to the success event, and passing the item value if found, null otherwise */
                    /** @type {?} */
                    var success = (( /** @type {?} */(rxjs.fromEvent(request, 'success')))).pipe(operators.map(function (event) { return (( /** @type {?} */(event.target))).result; }), operators.map(function (result) { return (result !== undefined) ? true : false; }));
                    /* Merging success and errors events and autoclosing the observable */
                    return (rxjs.race(success, _this.toErrorObservable(request, "has")));
                }), operators.first());
            };
        /**
         * Connects to IndexedDB and creates the object store on first time
         */
        /**
         * Connects to IndexedDB and creates the object store on first time
         * @protected
         * @param {?=} prefix
         * @return {?}
         */
        IndexedDBDatabase.prototype.connect = /**
         * Connects to IndexedDB and creates the object store on first time
         * @protected
         * @param {?=} prefix
         * @return {?}
         */
            function (prefix) {
                var _this = this;
                if (prefix === void 0) {
                    prefix = null;
                }
                /** @type {?} */
                var request;
                /* Connecting to IndexedDB */
                try {
                    request = indexedDB.open(this.dbName);
                }
                catch (error) {
                    /* Fallback storage if IndexedDb connection is failing */
                    this.setFallback(prefix);
                    return;
                }
                /* Listening the event fired on first connection, creating the object store for local storage */
                (( /** @type {?} */(rxjs.fromEvent(request, 'upgradeneeded'))))
                    .pipe(operators.first())
                    .subscribe(function (event) {
                    /* Getting the database connection */
                    /** @type {?} */
                    var database = ( /** @type {?} */((( /** @type {?} */(event.target))).result));
                    /* Checking if the object store already exists, to avoid error */
                    if (!database.objectStoreNames.contains(_this.objectStoreName)) {
                        /* Creating the object store for local storage */
                        database.createObjectStore(_this.objectStoreName);
                    }
                });
                /* Listening the success event and converting to an RxJS Observable */
                /** @type {?} */
                var success = ( /** @type {?} */(rxjs.fromEvent(request, 'success')));
                /* Merging success and errors events */
                (( /** @type {?} */(rxjs.race(success, this.toErrorObservable(request, "connection")))))
                    .pipe(operators.first())
                    .subscribe(function (event) {
                    /* Storing the database connection for further access */
                    _this.database.next(( /** @type {?} */((( /** @type {?} */(event.target))).result)));
                }, function () {
                    /* Fallback storage if IndexedDb connection is failing */
                    _this.setFallback(prefix);
                });
            };
        /**
         * Opens an IndexedDB transaction and gets the local storage object store
         * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations
         * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable
         */
        /**
         * Opens an IndexedDB transaction and gets the local storage object store
         * @protected
         * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations
         * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable
         */
        IndexedDBDatabase.prototype.transaction = /**
         * Opens an IndexedDB transaction and gets the local storage object store
         * @protected
         * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations
         * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable
         */
            function (mode) {
                var _this = this;
                if (mode === void 0) {
                    mode = 'readonly';
                }
                /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */
                return this.database
                    .pipe(operators.map(function (database) { return database.transaction([_this.objectStoreName], mode).objectStore(_this.objectStoreName); }));
            };
        /**
         * Transforms a IndexedDB success event in an RxJS Observable
         * @param request The request to listen
         * @returns A RxJS Observable with true value
         */
        /**
         * Transforms a IndexedDB success event in an RxJS Observable
         * @protected
         * @param {?} request The request to listen
         * @return {?} A RxJS Observable with true value
         */
        IndexedDBDatabase.prototype.toSuccessObservable = /**
         * Transforms a IndexedDB success event in an RxJS Observable
         * @protected
         * @param {?} request The request to listen
         * @return {?} A RxJS Observable with true value
         */
            function (request) {
                /* Transforming a IndexedDB success event in an RxJS Observable with true value */
                return (( /** @type {?} */(rxjs.fromEvent(request, 'success'))))
                    .pipe(operators.map(function () { return true; }));
            };
        /**
         * Transforms a IndexedDB error event in an RxJS ErrorObservable
         * @param request The request to listen
         * @param error Optionnal details about the error's origin
         * @returns A RxJS ErrorObservable
         */
        /**
         * Transforms a IndexedDB error event in an RxJS ErrorObservable
         * @protected
         * @param {?} request The request to listen
         * @param {?=} error Optionnal details about the error's origin
         * @return {?} A RxJS ErrorObservable
         */
        IndexedDBDatabase.prototype.toErrorObservable = /**
         * Transforms a IndexedDB error event in an RxJS ErrorObservable
         * @protected
         * @param {?} request The request to listen
         * @param {?=} error Optionnal details about the error's origin
         * @return {?} A RxJS ErrorObservable
         */
            function (request, error) {
                if (error === void 0) {
                    error = "";
                }
                /* Transforming a IndexedDB error event in an RxJS ErrorObservable */
                return (( /** @type {?} */(rxjs.fromEvent(request, 'error'))))
                    .pipe(operators.mergeMap(function () { return rxjs.throwError(new Error("IndexedDB " + error + " issue : " + (( /** @type {?} */(request.error))).message + ".")); }));
            };
        /**
         * @protected
         * @param {?} prefix
         * @return {?}
         */
        IndexedDBDatabase.prototype.setFallback = /**
         * @protected
         * @param {?} prefix
         * @return {?}
         */
            function (prefix) {
                this.fallback = new LocalStorageDatabase(prefix);
            };
        IndexedDBDatabase.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        IndexedDBDatabase.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
            ];
        };
        /** @nocollapse */ IndexedDBDatabase.ngInjectableDef = i0.defineInjectable({ factory: function IndexedDBDatabase_Factory() { return new IndexedDBDatabase(i0.inject(LOCAL_STORAGE_PREFIX, 8)); }, token: IndexedDBDatabase, providedIn: "root" });
        return IndexedDBDatabase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MockLocalDatabase = /** @class */ (function () {
        function MockLocalDatabase() {
            this.localStorage = new Map();
        }
        Object.defineProperty(MockLocalDatabase.prototype, "size", {
            get: /**
             * @return {?}
             */ function () {
                return rxjs.of(this.localStorage.size);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Gets an item value in local storage
         * @param key The item's key
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        MockLocalDatabase.prototype.getItem = /**
         * Gets an item value in local storage
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key) {
                /** @type {?} */
                var rawData = this.localStorage.get(key);
                return rxjs.of((rawData !== undefined) ? rawData : null);
            };
        /**
         * Sets an item in local storage
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        MockLocalDatabase.prototype.setItem = /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key, data) {
                this.localStorage.set(key, data);
                return rxjs.of(true);
            };
        /**
         * Deletes an item in local storage
         * @param key The item's key
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        MockLocalDatabase.prototype.removeItem = /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key) {
                this.localStorage.delete(key);
                return rxjs.of(true);
            };
        /**
         * Deletes all items from local storage
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        MockLocalDatabase.prototype.clear = /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function () {
                this.localStorage.clear();
                return rxjs.of(true);
            };
        /**
         * @return {?}
         */
        MockLocalDatabase.prototype.keys = /**
         * @return {?}
         */
            function () {
                return rxjs.of(Array.from(this.localStorage.keys()));
            };
        /**
         * @param {?} key
         * @return {?}
         */
        MockLocalDatabase.prototype.has = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return rxjs.of(this.localStorage.has(key));
            };
        MockLocalDatabase.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ MockLocalDatabase.ngInjectableDef = i0.defineInjectable({ factory: function MockLocalDatabase_Factory() { return new MockLocalDatabase(); }, token: MockLocalDatabase, providedIn: "root" });
        return MockLocalDatabase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} platformId
     * @param {?} prefix
     * @return {?}
     */
    function localDatabaseFactory(platformId, prefix) {
        if (common.isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {
            /* Try with IndexedDB in modern browsers */
            return new IndexedDBDatabase(prefix);
        }
        else if (common.isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {
            /* Try with localStorage in old browsers (IE9) */
            return new LocalStorageDatabase(prefix);
        }
        else {
            /* Fake database for server-side rendering (Universal) */
            return new MockLocalDatabase();
        }
    }
    /**
     * @abstract
     */
    var LocalDatabase = /** @class */ (function () {
        function LocalDatabase() {
        }
        LocalDatabase.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root',
                        useFactory: localDatabaseFactory,
                        deps: [
                            i0.PLATFORM_ID,
                            [new i0.Optional(), LOCAL_STORAGE_PREFIX]
                        ]
                    },] }
        ];
        /** @nocollapse */ LocalDatabase.ngInjectableDef = i0.defineInjectable({ factory: function LocalDatabase_Factory() { return localDatabaseFactory(i0.inject(i0.PLATFORM_ID), i0.inject(LOCAL_STORAGE_PREFIX, 8)); }, token: LocalDatabase, providedIn: "root" });
        return LocalDatabase;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@todo Add other JSON Schema validation features
     */
    var JSONValidator = /** @class */ (function () {
        function JSONValidator() {
        }
        /**
         * Validate a JSON data against a JSON Schema
         * @param data JSON data to validate
         * @param schema Subset of JSON Schema.
         * Types are enforced to validate everything:
         * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
         * Therefore, unlike the spec, booleans are not allowed as schemas.
         * Not all validation features are supported: just follow the interface.
         * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid
         */
        /**
         * Validate a JSON data against a JSON Schema
         * @param {?} data JSON data to validate
         * @param {?} schema Subset of JSON Schema.
         * Types are enforced to validate everything:
         * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
         * Therefore, unlike the spec, booleans are not allowed as schemas.
         * Not all validation features are supported: just follow the interface.
         * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid
         */
        JSONValidator.prototype.validate = /**
         * Validate a JSON data against a JSON Schema
         * @param {?} data JSON data to validate
         * @param {?} schema Subset of JSON Schema.
         * Types are enforced to validate everything:
         * each value MUST have 'type' or 'properties' or 'items' or 'const' or 'enum'.
         * Therefore, unlike the spec, booleans are not allowed as schemas.
         * Not all validation features are supported: just follow the interface.
         * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid
         */
            function (data, schema) {
                /** @todo When TS 2.8, explore if this is possible with conditional types */
                if (((!(schema.hasOwnProperty('const') && schema.const !== undefined)
                    && !(schema.hasOwnProperty('enum') && schema.enum != null) && !(schema.hasOwnProperty('type') && schema.type != null))
                    || schema.type === 'array' || schema.type === 'object')
                    && !(schema.hasOwnProperty('properties') && schema.properties != null) && !(schema.hasOwnProperty('items') && schema.items != null)) {
                    throw new Error("Each value must have a 'type' or 'properties' or 'items' or 'const' or 'enum', to enforce strict types.");
                }
                if (schema.hasOwnProperty('const') && schema.const !== undefined && (data !== schema.const)) {
                    return false;
                }
                if (!this.validateEnum(data, schema)) {
                    return false;
                }
                if (!this.validateType(data, schema)) {
                    return false;
                }
                if (!this.validateItems(data, schema)) {
                    return false;
                }
                if (!this.validateProperties(data, schema)) {
                    return false;
                }
                if (!this.validateRequired(data, schema)) {
                    return false;
                }
                return true;
            };
        /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        JSONValidator.prototype.isObjectNotNull = /**
         * @protected
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return (value !== null) && (typeof value === 'object');
            };
        /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateProperties = /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (!schema.hasOwnProperty('properties') || (schema.properties == null)) {
                    return true;
                }
                if (!this.isObjectNotNull(data)) {
                    return false;
                }
                /**
                 * Check if the object doesn't have more properties than expected
                 * Equivalent of additionalProperties: false
                 */
                if (Object.keys(schema.properties).length < Object.keys(data).length) {
                    return false;
                }
                /* Recursively validate all properties */
                for (var property in schema.properties) {
                    if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {
                        if (!this.validate(data[property], schema.properties[property])) {
                            return false;
                        }
                    }
                }
                return true;
            };
        /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateRequired = /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                var e_1, _a;
                if (!schema.hasOwnProperty('required') || (schema.required == null)) {
                    return true;
                }
                if (!this.isObjectNotNull(data)) {
                    return false;
                }
                try {
                    for (var _b = __values(schema.required), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var requiredProp = _c.value;
                        /* Checks if the property is present in the schema 'properties' */
                        if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {
                            throw new Error("'required' properties must be described in 'properties' too.");
                        }
                        /* Checks if the property is present in the data */
                        if (!data.hasOwnProperty(requiredProp)) {
                            return false;
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return true;
            };
        /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateEnum = /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (!schema.hasOwnProperty('enum') || (schema.enum == null)) {
                    return true;
                }
                /** @todo Move to ES2016 .includes() ? */
                return (schema.enum.indexOf(data) !== -1);
            };
        /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateType = /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (!schema.hasOwnProperty('type') || (schema.type == null)) {
                    return true;
                }
                switch (schema.type) {
                    case 'null':
                        return data === null;
                    case 'string':
                        return this.validateString(data, schema);
                    case 'number':
                    case 'integer':
                        return this.validateNumber(data, schema);
                    case 'boolean':
                        return typeof data === 'boolean';
                    case 'object':
                        return typeof data === 'object';
                    case 'array':
                        return Array.isArray(data);
                }
                return true;
            };
        /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateItems = /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                var e_2, _a;
                if (!schema.hasOwnProperty('items') || (schema.items == null)) {
                    return true;
                }
                if (!Array.isArray(data)) {
                    return false;
                }
                if (schema.hasOwnProperty('maxItems') && (schema.maxItems != null)) {
                    if (!Number.isInteger(schema.maxItems) || schema.maxItems < 0) {
                        throw new Error("'maxItems' must be a non-negative integer.");
                    }
                    if (data.length > schema.maxItems) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('minItems') && (schema.minItems != null)) {
                    if (!Number.isInteger(schema.minItems) || schema.minItems < 0) {
                        throw new Error("'minItems' must be a non-negative integer.");
                    }
                    if (data.length < schema.minItems) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('uniqueItems') && (schema.uniqueItems != null)) {
                    if (schema.uniqueItems) {
                        /** @type {?} */
                        var dataSet = new Set(data);
                        if (data.length !== dataSet.size) {
                            return false;
                        }
                    }
                }
                if (Array.isArray(schema.items)) {
                    return this.validateItemsList(data, schema);
                }
                try {
                    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                        var value = data_1_1.value;
                        if (!this.validate(value, schema.items)) {
                            return false;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                            _a.call(data_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return true;
            };
        /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateItemsList = /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                /** @type {?} */
                var items = ( /** @type {?} */(schema.items));
                if (data.length !== items.length) {
                    return false;
                }
                for (var i = 0; i < items.length; i += 1) {
                    if (!this.validate(data[i], items[i])) {
                        return false;
                    }
                }
                return true;
            };
        /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateString = /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (typeof data !== 'string') {
                    return false;
                }
                if (schema.hasOwnProperty('maxLength') && (schema.maxLength != null)) {
                    if (!Number.isInteger(schema.maxLength) || schema.maxLength < 0) {
                        throw new Error("'maxLength' must be a non-negative integer.");
                    }
                    if (data.length > schema.maxLength) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('minLength') && (schema.minLength != null)) {
                    if (!Number.isInteger(schema.minLength) || schema.minLength < 0) {
                        throw new Error("'minLength' must be a non-negative integer.");
                    }
                    if (data.length < schema.minLength) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('pattern') && (schema.pattern != null)) {
                    /** @type {?} */
                    var regularExpression = new RegExp(schema.pattern);
                    if (!regularExpression.test(data)) {
                        return false;
                    }
                }
                return true;
            };
        /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
        JSONValidator.prototype.validateNumber = /**
         * @protected
         * @param {?} data
         * @param {?} schema
         * @return {?}
         */
            function (data, schema) {
                if (typeof data !== 'number') {
                    return false;
                }
                if ((schema.type === 'integer') && !Number.isInteger(data)) {
                    return false;
                }
                if (schema.hasOwnProperty('multipleOf') && (schema.multipleOf != null)) {
                    if (schema.multipleOf <= 0) {
                        throw new Error("'multipleOf' must be a number strictly greater than 0.");
                    }
                    if (!Number.isInteger(data / schema.multipleOf)) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('maximum') && (schema.maximum != null)) {
                    if (data > schema.maximum) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('exclusiveMaximum') && (schema.exclusiveMaximum != null)) {
                    if (data >= schema.exclusiveMaximum) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('minimum') && (schema.minimum != null)) {
                    if (data < schema.minimum) {
                        return false;
                    }
                }
                if (schema.hasOwnProperty('exclusiveMinimum') && (schema.exclusiveMinimum != null)) {
                    if (data <= schema.exclusiveMinimum) {
                        return false;
                    }
                }
                return true;
            };
        JSONValidator.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ JSONValidator.ngInjectableDef = i0.defineInjectable({ factory: function JSONValidator_Factory() { return new JSONValidator(); }, token: JSONValidator, providedIn: "root" });
        return JSONValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LocalStorage = /** @class */ (function () {
        function LocalStorage(database, jsonValidator) {
            this.database = database;
            this.jsonValidator = jsonValidator;
            this.getItemOptionsDefault = {
                schema: null
            };
        }
        Object.defineProperty(LocalStorage.prototype, "size", {
            /**
             * Number of items in the storage
             */
            get: /**
             * Number of items in the storage
             * @return {?}
             */ function () {
                return this.database.size;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @template T
         * @param {?} key
         * @param {?=} options
         * @return {?}
         */
        LocalStorage.prototype.getItem = /**
         * @template T
         * @param {?} key
         * @param {?=} options
         * @return {?}
         */
            function (key, options) {
                var _this = this;
                if (options === void 0) {
                    options = this.getItemOptionsDefault;
                }
                return this.database.getItem(key).pipe(
                /* Validate data upon a json schema if requested */
                operators.mergeMap(function (data) {
                    if (data === null) {
                        return rxjs.of(null);
                    }
                    else if (options.schema) {
                        /** @type {?} */
                        var validation = true;
                        try {
                            validation = _this.jsonValidator.validate(data, options.schema);
                        }
                        catch (error) {
                            return rxjs.throwError(error);
                        }
                        if (!validation) {
                            return rxjs.throwError(new Error("JSON invalid"));
                        }
                    }
                    return rxjs.of(( /** @type {?} */(data)));
                }));
            };
        /**
         * Gets an item value in local storage WITHOUT any validation.
         * It is a convenience method for development only: do NOT use it in production code,
         * as it can cause security issues and errors and may be removed in future versions.
         * Use the normal .getItem() method instead.
         * @ignore
         * @deprecated
         * @param key The item's key
         * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        /**
         * Gets an item value in local storage WITHOUT any validation.
         * It is a convenience method for development only: do NOT use it in production code,
         * as it can cause security issues and errors and may be removed in future versions.
         * Use the normal .getItem() method instead.
         * @ignore
         * @deprecated
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
        LocalStorage.prototype.getUnsafeItem = /**
         * Gets an item value in local storage WITHOUT any validation.
         * It is a convenience method for development only: do NOT use it in production code,
         * as it can cause security issues and errors and may be removed in future versions.
         * Use the normal .getItem() method instead.
         * @ignore
         * @deprecated
         * @template T
         * @param {?} key The item's key
         * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
         */
            function (key) {
                return this.database.getItem(key);
            };
        /**
         * Sets an item in local storage
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorage.prototype.setItem = /**
         * Sets an item in local storage
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key, data) {
                return this.database.setItem(key, data);
            };
        /**
         * Deletes an item in local storage
         * @param key The item's key
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorage.prototype.removeItem = /**
         * Deletes an item in local storage
         * @param {?} key The item's key
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function (key) {
                return this.database.removeItem(key);
            };
        /**
         * Deletes all items from local storage
         * @returns An RxJS Observable to wait the end of the operation
         */
        /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
        LocalStorage.prototype.clear = /**
         * Deletes all items from local storage
         * @return {?} An RxJS Observable to wait the end of the operation
         */
            function () {
                return this.database.clear();
            };
        /**
         * Get all keys stored in local storage
         * @returns A RxJS Observable returning an array of the indexes
         */
        /**
         * Get all keys stored in local storage
         * @return {?} A RxJS Observable returning an array of the indexes
         */
        LocalStorage.prototype.keys = /**
         * Get all keys stored in local storage
         * @return {?} A RxJS Observable returning an array of the indexes
         */
            function () {
                return this.database.keys();
            };
        /**
         * Tells if a key exists in storage
         * @returns A RxJS Observable telling if the key exists
         */
        /**
         * Tells if a key exists in storage
         * @param {?} key
         * @return {?} A RxJS Observable telling if the key exists
         */
        LocalStorage.prototype.has = /**
         * Tells if a key exists in storage
         * @param {?} key
         * @return {?} A RxJS Observable telling if the key exists
         */
            function (key) {
                return this.database.has(key);
            };
        /**
         * Sets an item in local storage, and auto-subscribes
         * @param key The item's key
         * @param data The item's value, must NOT be null or undefined
         */
        /**
         * Sets an item in local storage, and auto-subscribes
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?}
         */
        LocalStorage.prototype.setItemSubscribe = /**
         * Sets an item in local storage, and auto-subscribes
         * @param {?} key The item's key
         * @param {?} data The item's value, must NOT be null or undefined
         * @return {?}
         */
            function (key, data) {
                this.setItem(key, data).subscribe(function () { }, function () { });
            };
        /**
         * Deletes an item in local storage, and auto-subscribes
         * @param key The item's key
         */
        /**
         * Deletes an item in local storage, and auto-subscribes
         * @param {?} key The item's key
         * @return {?}
         */
        LocalStorage.prototype.removeItemSubscribe = /**
         * Deletes an item in local storage, and auto-subscribes
         * @param {?} key The item's key
         * @return {?}
         */
            function (key) {
                this.removeItem(key).subscribe(function () { }, function () { });
            };
        /** Deletes all items from local storage, and auto-subscribes */
        /**
         * Deletes all items from local storage, and auto-subscribes
         * @return {?}
         */
        LocalStorage.prototype.clearSubscribe = /**
         * Deletes all items from local storage, and auto-subscribes
         * @return {?}
         */
            function () {
                this.clear().subscribe(function () { }, function () { });
            };
        LocalStorage.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LocalStorage.ctorParameters = function () {
            return [
                { type: LocalDatabase },
                { type: JSONValidator }
            ];
        };
        /** @nocollapse */ LocalStorage.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(i0.inject(LocalDatabase), i0.inject(JSONValidator)); }, token: LocalStorage, providedIn: "root" });
        return LocalStorage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.LocalDatabase = LocalDatabase;
    exports.IndexedDBDatabase = IndexedDBDatabase;
    exports.LocalStorageDatabase = LocalStorageDatabase;
    exports.MockLocalDatabase = MockLocalDatabase;
    exports.JSONValidator = JSONValidator;
    exports.LocalStorage = LocalStorage;
    exports.localStorageProviders = localStorageProviders;
    exports.LOCAL_STORAGE_PREFIX = LOCAL_STORAGE_PREFIX;
    exports.ɵa = localDatabaseFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXB3YS1sb2NhbC1zdG9yYWdlLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS9saWIvdG9rZW5zLnRzIiwibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlL2xpYi9kYXRhYmFzZXMvbG9jYWxzdG9yYWdlLWRhdGFiYXNlLnRzIiwibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlL2xpYi9kYXRhYmFzZXMvaW5kZXhlZGRiLWRhdGFiYXNlLnRzIiwibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlL2xpYi9kYXRhYmFzZXMvbW9jay1sb2NhbC1kYXRhYmFzZS50cyIsIm5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS9saWIvZGF0YWJhc2VzL2xvY2FsLWRhdGFiYXNlLnRzIiwibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS9saWIvdmFsaWRhdGlvbi9qc29uLXZhbGlkYXRvci50cyIsIm5nOi8vQG5neC1wd2EvbG9jYWwtc3RvcmFnZS9saWIvbGliLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFX1BSRUZJWCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdsb2NhbFN0b3JhZ2VQcmVmaXgnLCB7IHByb3ZpZGVkSW46ICdyb290JywgZmFjdG9yeTogKCkgPT4gJycgfSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYWxTdG9yYWdlUHJvdmlkZXJzQ29uZmlnIHtcblxuICAvKiogT3B0aW9uYWwgcHJlZml4IHRvIGF2b2lkIGNvbGxpc2lvbiBpbiBtdWx0aXBsZSBhcHBzIG9uIHNhbWUgc3ViZG9tYWluICovXG4gIHByZWZpeD86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsU3RvcmFnZVByb3ZpZGVycyhjb25maWc6IExvY2FsU3RvcmFnZVByb3ZpZGVyc0NvbmZpZyk6IFByb3ZpZGVyW10ge1xuICByZXR1cm4gW1xuICAgIGNvbmZpZy5wcmVmaXggPyB7IHByb3ZpZGU6IExPQ0FMX1NUT1JBR0VfUFJFRklYLCB1c2VWYWx1ZTogY29uZmlnLnByZWZpeCB9IDogW11cbiAgXTtcbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IExvY2FsRGF0YWJhc2UgfSBmcm9tICcuL2xvY2FsLWRhdGFiYXNlJztcbmltcG9ydCB7IExPQ0FMX1NUT1JBR0VfUFJFRklYIH0gZnJvbSAnLi4vdG9rZW5zJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlRGF0YWJhc2UgaW1wbGVtZW50cyBMb2NhbERhdGFiYXNlIHtcblxuICAvKiBJbml0aWFsaXppbmcgbmF0aXZlIGxvY2FsU3RvcmFnZSByaWdodCBub3cgdG8gYmUgYWJsZSB0byBjaGVjayBpdHMgc3VwcG9ydCBvbiBjbGFzcyBpbnN0YW5jaWF0aW9uICovXG4gIHByb3RlY3RlZCBwcmVmaXggPSAnJztcblxuICBnZXQgc2l6ZSgpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiBvZihsb2NhbFN0b3JhZ2UubGVuZ3RoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTE9DQUxfU1RPUkFHRV9QUkVGSVgpIHByb3RlY3RlZCB1c2VyUHJlZml4OiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xuXG4gICAgaWYgKHVzZXJQcmVmaXgpIHtcbiAgICAgIHRoaXMucHJlZml4ID0gYCR7dXNlclByZWZpeH1fYDtcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuIGl0ZW0gdmFsdWUgaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIFRoZSBpdGVtJ3MgdmFsdWUgaWYgdGhlIGtleSBleGlzdHMsIG51bGwgb3RoZXJ3aXNlLCB3cmFwcGVkIGluIGFuIFJ4SlMgT2JzZXJ2YWJsZVxuICAgKi9cbiAgZ2V0SXRlbTxUID0gYW55PihrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8VCB8IG51bGw+IHtcblxuICAgIGNvbnN0IHVucGFyc2VkRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGAke3RoaXMucHJlZml4fSR7a2V5fWApO1xuICAgIGxldCBwYXJzZWREYXRhOiBUIHwgbnVsbCA9IG51bGw7XG5cbiAgICBpZiAodW5wYXJzZWREYXRhICE9IG51bGwpIHtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UodW5wYXJzZWREYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKG5ldyBFcnJvcihgSW52YWxpZCBkYXRhIGluIGxvY2FsU3RvcmFnZS5gKSk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gb2YocGFyc2VkRGF0YSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIFRoZSBpdGVtJ3MgdmFsdWUsIG11c3QgTk9UIGJlIG51bGwgb3IgdW5kZWZpbmVkXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogYW55KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHt0aGlzLnByZWZpeH0ke2tleX1gLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYCR7dGhpcy5wcmVmaXh9JHtrZXl9YCk7XG5cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBpdGVtcyBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICBjbGVhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuXG4gICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gIH1cblxuICBrZXlzKCk6IE9ic2VydmFibGU8c3RyaW5nW10+IHtcblxuICAgIGNvbnN0IGtleXM6IHN0cmluZ1tdID0gW107XG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuXG4gICAgICBrZXlzLnB1c2godGhpcy5nZXRLZXkoaW5kZXgpIGFzIHN0cmluZyk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gb2Yoa2V5cyk7XG5cbiAgfVxuXG4gIGhhcyhrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxvY2FsU3RvcmFnZS5sZW5ndGg7IGluZGV4ICs9IDEpIHtcblxuICAgICAgaWYgKGtleSA9PT0gdGhpcy5nZXRLZXkoaW5kZXgpKcOCwqB7XG5cbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gb2YoZmFsc2UpO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0S2V5KGluZGV4OiBudW1iZXIpOiBzdHJpbmcgfCBudWxsIHtcblxuICAgIGNvbnN0IHByZWZpeGVkS2V5ID0gbG9jYWxTdG9yYWdlLmtleShpbmRleCk7XG5cbiAgICBpZiAocHJlZml4ZWRLZXkgIT09IG51bGwpIHtcblxuICAgICAgcmV0dXJuICh0aGlzLnByZWZpeCA9PT0gJycpID8gcHJlZml4ZWRLZXkgOiBwcmVmaXhlZEtleS5zdWJzdHIodGhpcy5wcmVmaXgubGVuZ3RoKTtcblxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuXG4gIH1cblxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCwgZnJvbUV2ZW50LCBvZiwgdGhyb3dFcnJvciwgcmFjZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBtZXJnZU1hcCwgZmlyc3QsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vbG9jYWwtZGF0YWJhc2UnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlRGF0YWJhc2UgfSBmcm9tICcuL2xvY2Fsc3RvcmFnZS1kYXRhYmFzZSc7XG5pbXBvcnQgeyBMT0NBTF9TVE9SQUdFX1BSRUZJWCB9IGZyb20gJy4uL3Rva2Vucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEluZGV4ZWREQkRhdGFiYXNlIGltcGxlbWVudHMgTG9jYWxEYXRhYmFzZSB7XG5cbiAgLyoqXG4gICAqIEluZGV4ZWREQiBkYXRhYmFzZSBuYW1lIGZvciBsb2NhbCBzdG9yYWdlXG4gICAqL1xuICBwcm90ZWN0ZWQgZGJOYW1lID0gJ25nU3RvcmFnZSc7XG4gIC8qKlxuICAgKiBJbmRleGVkREIgb2JqZWN0IHN0b3JlIG5hbWUgZm9yIGxvY2FsIHN0b3JhZ2VcbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBvYmplY3RTdG9yZU5hbWUgPSAnbG9jYWxTdG9yYWdlJztcbiAgLyoqXG4gICAqIEluZGV4ZWREQiBrZXkgcGF0aCBuYW1lIGZvciBsb2NhbCBzdG9yYWdlICh3aGVyZSBhbiBpdGVtJ3Mga2V5IHdpbGwgYmUgc3RvcmVkKVxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGtleVBhdGggPSAna2V5JztcbiAgLyoqXG4gICAqIEluZGV4ZWREQiBkYXRhIHBhdGggbmFtZSBmb3IgbG9jYWwgc3RvcmFnZSAod2hlcmUgaXRlbXMnIHZhbHVlIHdpbGwgYmUgc3RvcmVkKVxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGRhdGFQYXRoID0gJ3ZhbHVlJztcbiAgLyoqXG4gICAqIEluZGV4ZWREQiBkYXRhYmFzZSBjb25uZWN0aW9uLCB3cmFwcGVkIGluIGEgUnhKUyBSZXBsYXlTdWJqZWN0IHRvIGJlIGFibGUgdG8gYWNjZXNzIHRoZSBjb25uZWN0aW9uXG4gICAqIGV2ZW4gYWZ0ZXIgdGhlIGNvbm5lY3Rpb24gc3VjY2VzcyBldmVudCBoYXBwZW5lZFxuICAgKi9cbiAgcHJvdGVjdGVkIGRhdGFiYXNlOiBSZXBsYXlTdWJqZWN0PElEQkRhdGFiYXNlPjtcbiAgLyoqXG4gICAqIEluZGV4ZWREQiBpcyBhdmFpbGFibGUgYnV0IGZhaWxpbmcgaW4gc29tZSBzY2VuYXJpb3MgKEZpcmVmb3ggcHJpdmF0ZSBtb2RlLCBTYWZhcmkgY3Jvc3Mtb3JpZ2luIGlmcmFtZXMpLFxuICAgKiBzbyBhIGZhbGxiYWNrIGNhbiBiZSBuZWVkZWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgZmFsbGJhY2s6IExvY2FsRGF0YWJhc2UgfCBudWxsID0gbnVsbDtcblxuICBnZXQgc2l6ZSgpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuXG4gICAgLyogRmFsbGJhY2sgc3RvcmFnZSBpZiBzZXQgKi9cbiAgICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2suc2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbigncmVhZG9ubHknKS5waXBlKFxuICAgICAgbWVyZ2VNYXAoKHRyYW5zYWN0aW9uKSA9PiB7XG5cbiAgICAgICAgLyogRGVsZXRpbmcgdGhlIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZSAqL1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdHJhbnNhY3Rpb24uY291bnQoKTtcblxuICAgICAgICBjb25zdCBzdWNjZXNzID0gKGZyb21FdmVudChyZXF1ZXN0LCAnc3VjY2VzcycpIGFzIE9ic2VydmFibGU8RXZlbnQ+KS5waXBlKFxuICAgICAgICAgIG1hcCgoZXZlbnQpID0+IChldmVudC50YXJnZXQgYXMgSURCUmVxdWVzdCkucmVzdWx0IGFzIG51bWJlciksXG4gICAgICAgICk7XG5cbiAgICAgICAgLyogTWVyZ2luZyBzdWNjZXNzIGFuZCBlcnJvcnMgZXZlbnRzIGFuZCBhdXRvY2xvc2luZyB0aGUgb2JzZXJ2YWJsZSAqL1xuICAgICAgICByZXR1cm4gKHJhY2Uoc3VjY2VzcywgdGhpcy50b0Vycm9yT2JzZXJ2YWJsZShyZXF1ZXN0LCBgbGVuZ3RoYCkpIGFzIE9ic2VydmFibGU8bnVtYmVyPik7XG5cbiAgICAgIH0pLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25uZWN0cyB0byBJbmRleGVkREJcbiAgICovXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTE9DQUxfU1RPUkFHRV9QUkVGSVgpIHByb3RlY3RlZCBwcmVmaXg6IHN0cmluZyB8IG51bGwgPSBudWxsKSB7XG5cbiAgICBpZiAocHJlZml4KSB7XG5cbiAgICAgIHRoaXMuZGJOYW1lID0gYCR7cHJlZml4fV8ke3RoaXMuZGJOYW1lfWA7XG5cbiAgICB9XG5cbiAgICAvKiBDcmVhdGluZyB0aGUgUnhKUyBSZXBsYXlTdWJqZWN0ICovXG4gICAgdGhpcy5kYXRhYmFzZSA9IG5ldyBSZXBsYXlTdWJqZWN0PElEQkRhdGFiYXNlPigpO1xuXG4gICAgLyogQ29ubmVjdGluZyB0byBJbmRleGVkREIgKi9cbiAgICB0aGlzLmNvbm5lY3QocHJlZml4KTtcblxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gaXRlbSB2YWx1ZSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgVGhlIGl0ZW0ncyB2YWx1ZSBpZiB0aGUga2V5IGV4aXN0cywgbnVsbCBvdGhlcndpc2UsIHdyYXBwZWQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqL1xuICBnZXRJdGVtPFQgPSBhbnk+KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUw4LCoHwgbnVsbD4ge1xuXG4gICAgLyogRmFsbGJhY2sgc3RvcmFnZSBpZiBzZXQgKi9cbiAgICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2suZ2V0SXRlbTxUPihrZXkpO1xuICAgIH1cblxuICAgIC8qIE9wZW5pbmcgYSB0cmFzYWN0aW9uIGFuZCByZXF1ZXN0aW5nIHRoZSBpdGVtIGluIGxvY2FsIHN0b3JhZ2UgKi9cbiAgICByZXR1cm4gdGhpcy5nZXRJdGVtRnJvbVRyYW5zYWN0aW9uPFQ+KGtleSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBtZXRob2QgdG8gZmFjdG9yaXplIHRoZSBnZXR0ZXIgZm9yIGdldEl0ZW0gYW5kIHNldEl0ZW0sXG4gICAqIHRoZSBsYXN0IG9uZSBuZWVkaW5nIHRvIGJlIGZyb20gYSBwcmVleGlzdGluZyB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSB0cmFuc2FjdGlvblBhcmFtIE9wdGlvbmFsIHByZS1leGlzdGluZyB0cmFuc2FjdGlvbiB0byB1c2UgZm9yIHRoZSByZWFkIHJlcXVlc3RcbiAgICogQHJldHVybnMgVGhlIGl0ZW0ncyB2YWx1ZSBpZiB0aGUga2V5IGV4aXN0cywgbnVsbCBvdGhlcndpc2UsIHdyYXBwZWQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqL1xuICBwcml2YXRlIGdldEl0ZW1Gcm9tVHJhbnNhY3Rpb248VCA9IGFueT4oa2V5OiBzdHJpbmcsIHRyYW5zYWN0aW9uUGFyYW0/OiBJREJPYmplY3RTdG9yZSk6IE9ic2VydmFibGU8VMOCwqB8IG51bGw+IHtcblxuICAgIGNvbnN0IHRyYW5zYWN0aW9uJCA9IHRyYW5zYWN0aW9uUGFyYW0gPyBvZih0cmFuc2FjdGlvblBhcmFtKSA6IHRoaXMudHJhbnNhY3Rpb24oKTtcblxuICAgIHJldHVybiB0cmFuc2FjdGlvbiQucGlwZShcbiAgICAgIG1hcCgodHJhbnNhY3Rpb24pID0+IHRyYW5zYWN0aW9uLmdldChrZXkpKSxcbiAgICAgIG1lcmdlTWFwKChyZXF1ZXN0KSA9PiB7XG5cbiAgICAgICAgLyogTGlzdGVuaW5nIHRvIHRoZSBzdWNjZXNzIGV2ZW50LCBhbmQgcGFzc2luZyB0aGUgaXRlbSB2YWx1ZSBpZiBmb3VuZCwgbnVsbCBvdGhlcndpc2UgKi9cbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IChmcm9tRXZlbnQocmVxdWVzdCwgJ3N1Y2Nlc3MnKSBhcyBPYnNlcnZhYmxlPEV2ZW50PikucGlwZShcbiAgICAgICAgICBtYXAoKGV2ZW50KSA9PiAoZXZlbnQudGFyZ2V0IGFzIElEQlJlcXVlc3QpLnJlc3VsdCksXG4gICAgICAgICAgbWFwKChyZXN1bHQpID0+IHJlc3VsdCAmJiAodGhpcy5kYXRhUGF0aCBpbiByZXN1bHQpID8gKHJlc3VsdFt0aGlzLmRhdGFQYXRoXSBhcyBUKSA6IG51bGwpXG4gICAgICAgICk7XG5cbiAgICAgICAgLyogTWVyZ2luZyBzdWNjZXNzIGFuZCBlcnJvcnMgZXZlbnRzIGFuZCBhdXRvY2xvc2luZyB0aGUgb2JzZXJ2YWJsZSAqL1xuICAgICAgICByZXR1cm4gKHJhY2Uoc3VjY2VzcywgdGhpcy50b0Vycm9yT2JzZXJ2YWJsZShyZXF1ZXN0LCBgZ2V0dGVyYCkpKTtcbiAgICAgIH0pLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIFRoZSBpdGVtJ3MgdmFsdWUsIG11c3QgTk9UIGJlIG51bGwgb3IgdW5kZWZpbmVkXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgc2V0SXRlbShrZXk6IHN0cmluZywgZGF0YTogYW55KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICAvKiBGYWxsYmFjayBzdG9yYWdlIGlmIHNldCAqL1xuICAgIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5mYWxsYmFjay5zZXRJdGVtKGtleSwgZGF0YSk7XG4gICAgfVxuXG4gICAgLyogU3RvcmluZyBudWxsIGlzIG5vdCBjb3JyZWN0bHkgc3VwcG9ydGVkIGJ5IEluZGV4ZWREQiBhbmQgdW5uZWNlc3NhcnkgaGVyZSAqL1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcblxuICAgICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gICAgfVxuXG4gICAgLyogVHJhbnNhY3Rpb24gbXVzdCBiZSB0aGUgc2FtZSBmb3IgcmVhZCBhbmQgd3JpdGUsIHRvIGF2b2lkIGNvbmN1cnJlbmN5IGlzc3VlcyAqL1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uJCA9IHRoaXMudHJhbnNhY3Rpb24oJ3JlYWR3cml0ZScpO1xuICAgIGxldCB0cmFuc2FjdGlvbjogSURCT2JqZWN0U3RvcmU7XG5cbiAgICAgICAgLyogT3BlbmluZyBhIHRyYW5zYWN0aW9uICovXG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbiQucGlwZShcbiAgICAgICAgICB0YXAoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbiA9IHZhbHVlO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIC8qIENoZWNrIGlmIHRoZSBrZXkgYWxyZWFkeSBleGlzdHMgb3Igbm90ICovXG4gICAgICAgICAgbWVyZ2VNYXAoKCkgPT4gdGhpcy5nZXRJdGVtRnJvbVRyYW5zYWN0aW9uKGtleSwgdHJhbnNhY3Rpb24pKSxcbiAgICAgICAgICBtYXAoKGV4aXN0aW5nRGF0YSkgPT4gKGV4aXN0aW5nRGF0YSA9PSBudWxsKSA/ICdhZGQnIDogJ3B1dCcpLFxuICAgICAgICAgIG1lcmdlTWFwKChtZXRob2QpID0+IHtcblxuICAgICAgICAgICAgbGV0IHJlcXVlc3Q6IElEQlJlcXVlc3Q7XG5cbiAgICAgICAgICAgIC8qIEFkZGluZyBvciB1cGRhdGluZyBsb2NhbCBzdG9yYWdlLCBiYXNlZCBvbiBwcmV2aW91cyBjaGVja2luZyAqL1xuICAgICAgICAgICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gdHJhbnNhY3Rpb24uYWRkKHsgW3RoaXMuZGF0YVBhdGhdOiBkYXRhIH0sIGtleSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3B1dCc6XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IHRyYW5zYWN0aW9uLnB1dCh7IFt0aGlzLmRhdGFQYXRoXTogZGF0YSB9LCBrZXkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBNZXJnaW5nIHN1Y2Nlc3MgKHBhc3NpbmcgdHJ1ZSkgYW5kIGVycm9yIGV2ZW50cyBhbmQgYXV0b2Nsb3NpbmcgdGhlIG9ic2VydmFibGUgKi9cbiAgICAgICAgICAgIHJldHVybiAocmFjZSh0aGlzLnRvU3VjY2Vzc09ic2VydmFibGUocmVxdWVzdCksIHRoaXMudG9FcnJvck9ic2VydmFibGUocmVxdWVzdCwgYHNldHRlcmApKSk7XG5cbiAgICAgICAgfSksXG4gICAgICAgIGZpcnN0KClcbiAgICAgICk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgLyogRmFsbGJhY2sgc3RvcmFnZSBpZiBzZXQgKi9cbiAgICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2sucmVtb3ZlSXRlbShrZXkpO1xuICAgIH1cblxuICAgIC8qIE9wZW5pbmcgYSB0cmFuc2FjdGlvbiBhbmQgY2hlY2tpbmcgaWYgdGhlIGl0ZW0gZXhpc3RzIGluIGxvY2FsIHN0b3JhZ2UgKi9cbiAgICByZXR1cm4gdGhpcy5nZXRJdGVtKGtleSkucGlwZShcbiAgICAgIG1lcmdlTWFwKChkYXRhKSA9PiB7XG5cbiAgICAgICAgLyogSWYgdGhlIGl0ZW0gZXhpc3RzIGluIGxvY2FsIHN0b3JhZ2UgKi9cbiAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuXG4gICAgICAgICAgLyogT3BlbmluZyBhIHRyYW5zYWN0aW9uICovXG4gICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb24oJ3JlYWR3cml0ZScpLnBpcGUobWVyZ2VNYXAoKHRyYW5zYWN0aW9uKSA9PiB7XG5cbiAgICAgICAgICAgIC8qIERlbGV0aW5nIHRoZSBpdGVtIGluIGxvY2FsIHN0b3JhZ2UgKi9cbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0cmFuc2FjdGlvbi5kZWxldGUoa2V5KTtcblxuICAgICAgICAgICAgLyogTWVyZ2luZyBzdWNjZXNzIChwYXNzaW5nIHRydWUpIGFuZCBlcnJvciBldmVudHMgYW5kIGF1dG9jbG9zaW5nIHRoZSBvYnNlcnZhYmxlICovXG4gICAgICAgICAgICByZXR1cm4gKHJhY2UodGhpcy50b1N1Y2Nlc3NPYnNlcnZhYmxlKHJlcXVlc3QpLCB0aGlzLnRvRXJyb3JPYnNlcnZhYmxlKHJlcXVlc3QsIGByZW1vdmVyYCkpKTtcblxuICAgICAgICAgIH0pKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyogUGFzc2luZyB0cnVlIGlmIHRoZSBpdGVtIGRvZXMgbm90IGV4aXN0IGluIGxvY2FsIHN0b3JhZ2UgKi9cbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gICAgICB9KSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgY2xlYXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICAvKiBGYWxsYmFjayBzdG9yYWdlIGlmIHNldCAqL1xuICAgIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5mYWxsYmFjay5jbGVhcigpO1xuICAgIH1cblxuICAgIC8qIE9wZW5pbmcgYSB0cmFuc2FjdGlvbiAqL1xuICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uKCdyZWFkd3JpdGUnKS5waXBlKFxuICAgICAgbWVyZ2VNYXAoKHRyYW5zYWN0aW9uKSA9PiB7XG5cbiAgICAgICAgLyogRGVsZXRpbmcgYWxsIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZSAqL1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdHJhbnNhY3Rpb24uY2xlYXIoKTtcblxuICAgICAgICAvKiBNZXJnaW5nIHN1Y2Nlc3MgKHBhc3NpbmcgdHJ1ZSkgYW5kIGVycm9yIGV2ZW50cyBhbmQgYXV0b2Nsb3NpbmcgdGhlIG9ic2VydmFibGUgKi9cbiAgICAgICAgcmV0dXJuIChyYWNlKHRoaXMudG9TdWNjZXNzT2JzZXJ2YWJsZShyZXF1ZXN0KSwgdGhpcy50b0Vycm9yT2JzZXJ2YWJsZShyZXF1ZXN0LCBgY2xlYXJlcmApKSk7XG5cbiAgICAgIH0pLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG5cbiAgfVxuXG4gIGtleXMoKTogT2JzZXJ2YWJsZTxzdHJpbmdbXT4ge1xuXG4gICAgLyogRmFsbGJhY2sgc3RvcmFnZSBpZiBzZXQgKi9cbiAgICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2sua2V5cygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uKCdyZWFkb25seScpLnBpcGUoXG4gICAgICBtZXJnZU1hcCgodHJhbnNhY3Rpb24pID0+IHtcblxuICAgICAgICAvKiBEZWxldGluZyB0aGUgaXRlbSBpbiBsb2NhbCBzdG9yYWdlICovXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0cmFuc2FjdGlvbi5nZXRBbGxLZXlzKCk7XG5cbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IChmcm9tRXZlbnQocmVxdWVzdCwgJ3N1Y2Nlc3MnKSBhcyBPYnNlcnZhYmxlPEV2ZW50PikucGlwZShcbiAgICAgICAgICBtYXAoKGV2ZW50KSA9PiAoZXZlbnQudGFyZ2V0IGFzIElEQlJlcXVlc3QpLnJlc3VsdCBhcyBzdHJpbmdbXSlcbiAgICAgICAgKTtcblxuICAgICAgICAvKiBNZXJnaW5nIHN1Y2Nlc3MgYW5kIGVycm9ycyBldmVudHMgYW5kIGF1dG9jbG9zaW5nIHRoZSBvYnNlcnZhYmxlICovXG4gICAgICAgIHJldHVybiAocmFjZShzdWNjZXNzLCB0aGlzLnRvRXJyb3JPYnNlcnZhYmxlKHJlcXVlc3QsIGBrZXlzYCkpKTtcblxuICAgICAgfSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcblxuICB9XG5cbiAgaGFzKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICAvKiBGYWxsYmFjayBzdG9yYWdlIGlmIHNldCAqL1xuICAgIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5mYWxsYmFjay5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbigncmVhZG9ubHknKS5waXBlKFxuICAgICAgbWFwKCh0cmFuc2FjdGlvbikgPT4gdHJhbnNhY3Rpb24uZ2V0S2V5KGtleSkpLFxuICAgICAgbWVyZ2VNYXAoKHJlcXVlc3QpID0+IHtcblxuICAgICAgICAvKiBMaXN0ZW5pbmcgdG8gdGhlIHN1Y2Nlc3MgZXZlbnQsIGFuZCBwYXNzaW5nIHRoZSBpdGVtIHZhbHVlIGlmIGZvdW5kLCBudWxsIG90aGVyd2lzZSAqL1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKGZyb21FdmVudChyZXF1ZXN0LCAnc3VjY2VzcycpIGFzIE9ic2VydmFibGU8RXZlbnQ+KS5waXBlKFxuICAgICAgICAgIG1hcCgoZXZlbnQpID0+IChldmVudC50YXJnZXQgYXMgSURCUmVxdWVzdCkucmVzdWx0KSxcbiAgICAgICAgICBtYXAoKHJlc3VsdCkgPT4gKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSA/IHRydWUgOiBmYWxzZSlcbiAgICAgICAgKTtcblxuICAgICAgICAvKiBNZXJnaW5nIHN1Y2Nlc3MgYW5kIGVycm9ycyBldmVudHMgYW5kIGF1dG9jbG9zaW5nIHRoZSBvYnNlcnZhYmxlICovXG4gICAgICAgIHJldHVybiAocmFjZShzdWNjZXNzLCB0aGlzLnRvRXJyb3JPYnNlcnZhYmxlKHJlcXVlc3QsIGBoYXNgKSkpO1xuICAgICAgfSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIENvbm5lY3RzIHRvIEluZGV4ZWREQiBhbmQgY3JlYXRlcyB0aGUgb2JqZWN0IHN0b3JlIG9uIGZpcnN0IHRpbWVcbiAgICovXG4gIHByb3RlY3RlZCBjb25uZWN0KHByZWZpeDogc3RyaW5nIHwgbnVsbCA9IG51bGwpOiB2b2lkIHtcblxuICAgIGxldCByZXF1ZXN0OiBJREJPcGVuREJSZXF1ZXN0O1xuXG4gICAgLyogQ29ubmVjdGluZyB0byBJbmRleGVkREIgKi9cbiAgICB0cnkge1xuXG4gICAgICByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4odGhpcy5kYk5hbWUpO1xuXG4gICAgfcOCwqBjYXRjaCAoZXJyb3IpIHtcblxuICAgICAgLyogRmFsbGJhY2sgc3RvcmFnZSBpZiBJbmRleGVkRGIgY29ubmVjdGlvbiBpcyBmYWlsaW5nICovXG4gICAgICB0aGlzLnNldEZhbGxiYWNrKHByZWZpeCk7XG5cbiAgICAgIHJldHVybjtcblxuICAgIH1cblxuICAgIC8qIExpc3RlbmluZyB0aGUgZXZlbnQgZmlyZWQgb24gZmlyc3QgY29ubmVjdGlvbiwgY3JlYXRpbmcgdGhlIG9iamVjdCBzdG9yZSBmb3IgbG9jYWwgc3RvcmFnZSAqL1xuICAgIChmcm9tRXZlbnQocmVxdWVzdCwgJ3VwZ3JhZGVuZWVkZWQnKSBhcyBPYnNlcnZhYmxlPEV2ZW50PilcbiAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuXG4gICAgICAgIC8qIEdldHRpbmcgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gKi9cbiAgICAgICAgY29uc3QgZGF0YWJhc2UgPSAoZXZlbnQudGFyZ2V0IGFzIElEQlJlcXVlc3QpLnJlc3VsdCBhcyBJREJEYXRhYmFzZTtcblxuICAgICAgICAvKiBDaGVja2luZyBpZiB0aGUgb2JqZWN0IHN0b3JlIGFscmVhZHkgZXhpc3RzLCB0byBhdm9pZCBlcnJvciAqL1xuICAgICAgICBpZiAoIWRhdGFiYXNlLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnModGhpcy5vYmplY3RTdG9yZU5hbWUpKSB7XG5cbiAgICAgICAgICAvKiBDcmVhdGluZyB0aGUgb2JqZWN0IHN0b3JlIGZvciBsb2NhbCBzdG9yYWdlICovXG4gICAgICAgICAgZGF0YWJhc2UuY3JlYXRlT2JqZWN0U3RvcmUodGhpcy5vYmplY3RTdG9yZU5hbWUpO1xuXG4gICAgICAgIH1cblxuICAgICAgfSk7XG5cbiAgICAvKiBMaXN0ZW5pbmcgdGhlIHN1Y2Nlc3MgZXZlbnQgYW5kIGNvbnZlcnRpbmcgdG8gYW4gUnhKUyBPYnNlcnZhYmxlICovXG4gICAgY29uc3Qgc3VjY2VzcyA9IGZyb21FdmVudChyZXF1ZXN0LCAnc3VjY2VzcycpIGFzIE9ic2VydmFibGU8RXZlbnQ+O1xuXG4gICAgLyogTWVyZ2luZyBzdWNjZXNzIGFuZCBlcnJvcnMgZXZlbnRzICovXG4gICAgKHJhY2Uoc3VjY2VzcywgdGhpcy50b0Vycm9yT2JzZXJ2YWJsZShyZXF1ZXN0LCBgY29ubmVjdGlvbmApKSBhcyBPYnNlcnZhYmxlPEV2ZW50PilcbiAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuXG4gICAgICAgIC8qIFN0b3JpbmcgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gZm9yIGZ1cnRoZXIgYWNjZXNzICovXG4gICAgICAgIHRoaXMuZGF0YWJhc2UubmV4dCgoZXZlbnQudGFyZ2V0IGFzIElEQlJlcXVlc3QpLnJlc3VsdCBhcyBJREJEYXRhYmFzZSk7XG5cbiAgICAgIH0sICgpID0+IHtcblxuICAgICAgICAvKiBGYWxsYmFjayBzdG9yYWdlIGlmIEluZGV4ZWREYiBjb25uZWN0aW9uIGlzIGZhaWxpbmcgKi9cbiAgICAgICAgdGhpcy5zZXRGYWxsYmFjayhwcmVmaXgpO1xuXG4gICAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGFuIEluZGV4ZWREQiB0cmFuc2FjdGlvbiBhbmQgZ2V0cyB0aGUgbG9jYWwgc3RvcmFnZSBvYmplY3Qgc3RvcmVcbiAgICogQHBhcmFtIG1vZGUgRGVmYXVsdCB0byAncmVhZG9ubHknIGZvciByZWFkIG9wZXJhdGlvbnMsIG9yICdyZWFkd3JpdGUnIGZvciB3cml0ZSBvcGVyYXRpb25zXG4gICAqIEByZXR1cm5zIEFuIEluZGV4ZWREQiB0cmFuc2FjdGlvbiBvYmplY3Qgc3RvcmUsIHdyYXBwZWQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqL1xuICBwcm90ZWN0ZWQgdHJhbnNhY3Rpb24obW9kZTogJ3JlYWRvbmx5JyB8ICdyZWFkd3JpdGUnID0gJ3JlYWRvbmx5Jyk6IE9ic2VydmFibGU8SURCT2JqZWN0U3RvcmU+IHtcblxuICAgIC8qIEZyb20gdGhlIEluZGV4ZWREQiBjb25uZWN0aW9uLCBvcGVuaW5nIGEgdHJhbnNhY3Rpb24gYW5kIGdldHRpbmcgdGhlIGxvY2FsIHN0b3JhZ2Ugb2JqZXQgc3RvcmUgKi9cbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZVxuICAgICAgLnBpcGUobWFwKChkYXRhYmFzZSkgPT4gZGF0YWJhc2UudHJhbnNhY3Rpb24oW3RoaXMub2JqZWN0U3RvcmVOYW1lXSwgbW9kZSkub2JqZWN0U3RvcmUodGhpcy5vYmplY3RTdG9yZU5hbWUpKSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGEgSW5kZXhlZERCIHN1Y2Nlc3MgZXZlbnQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqIEBwYXJhbSByZXF1ZXN0IFRoZSByZXF1ZXN0IHRvIGxpc3RlblxuICAgKiBAcmV0dXJucyBBIFJ4SlMgT2JzZXJ2YWJsZSB3aXRoIHRydWUgdmFsdWVcbiAgICovXG4gIHByb3RlY3RlZCB0b1N1Y2Nlc3NPYnNlcnZhYmxlKHJlcXVlc3Q6IElEQlJlcXVlc3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIC8qIFRyYW5zZm9ybWluZyBhIEluZGV4ZWREQiBzdWNjZXNzIGV2ZW50IGluIGFuIFJ4SlMgT2JzZXJ2YWJsZSB3aXRoIHRydWUgdmFsdWUgKi9cbiAgICByZXR1cm4gKGZyb21FdmVudChyZXF1ZXN0LCAnc3VjY2VzcycpIGFzIE9ic2VydmFibGU8RXZlbnQ+KVxuICAgICAgLnBpcGUobWFwKCgpID0+IHRydWUpKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgYSBJbmRleGVkREIgZXJyb3IgZXZlbnQgaW4gYW4gUnhKUyBFcnJvck9ic2VydmFibGVcbiAgICogQHBhcmFtIHJlcXVlc3QgVGhlIHJlcXVlc3QgdG8gbGlzdGVuXG4gICAqIEBwYXJhbSBlcnJvciBPcHRpb25uYWwgZGV0YWlscyBhYm91dCB0aGUgZXJyb3IncyBvcmlnaW5cbiAgICogQHJldHVybnMgQSBSeEpTIEVycm9yT2JzZXJ2YWJsZVxuICAgKi9cbiAgcHJvdGVjdGVkIHRvRXJyb3JPYnNlcnZhYmxlKHJlcXVlc3Q6IElEQlJlcXVlc3QsIGVycm9yID0gYGApOiBPYnNlcnZhYmxlPG5ldmVyPiB7XG5cbiAgICAvKiBUcmFuc2Zvcm1pbmcgYSBJbmRleGVkREIgZXJyb3IgZXZlbnQgaW4gYW4gUnhKUyBFcnJvck9ic2VydmFibGUgKi9cbiAgICByZXR1cm4gKGZyb21FdmVudChyZXF1ZXN0LCAnZXJyb3InKSBhcyBPYnNlcnZhYmxlPEV2ZW50PilcbiAgICAgIC5waXBlKFxuICAgICAgICBtZXJnZU1hcCgoKSA9PiB0aHJvd0Vycm9yKG5ldyBFcnJvcihgSW5kZXhlZERCICR7ZXJyb3J9IGlzc3VlIDogJHsocmVxdWVzdC5lcnJvciBhcyBET01FeGNlcHRpb24pLm1lc3NhZ2V9LmApKSlcbiAgICAgICk7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRGYWxsYmFjayhwcmVmaXg6IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLmZhbGxiYWNrID0gbmV3IExvY2FsU3RvcmFnZURhdGFiYXNlKHByZWZpeCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vbG9jYWwtZGF0YWJhc2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNb2NrTG9jYWxEYXRhYmFzZSBpbXBsZW1lbnRzIExvY2FsRGF0YWJhc2Uge1xuXG4gIHByb3RlY3RlZCBsb2NhbFN0b3JhZ2UgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuXG4gIGdldCBzaXplKCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG9mKHRoaXMubG9jYWxTdG9yYWdlLnNpemUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gaXRlbSB2YWx1ZSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgVGhlIGl0ZW0ncyB2YWx1ZSBpZiB0aGUga2V5IGV4aXN0cywgbnVsbCBvdGhlcndpc2UsIHdyYXBwZWQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqL1xuICAgZ2V0SXRlbTxUID0gYW55PihrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8VCB8w4LCoG51bGw+IHtcblxuICAgIGNvbnN0IHJhd0RhdGE6IFQgfCBudWxsID0gdGhpcy5sb2NhbFN0b3JhZ2UuZ2V0KGtleSk7XG5cbiAgICByZXR1cm4gb2YoKHJhd0RhdGEgIT09IHVuZGVmaW5lZCkgPyByYXdEYXRhIDogbnVsbCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIFRoZSBpdGVtJ3MgdmFsdWUsIG11c3QgTk9UIGJlIG51bGwgb3IgdW5kZWZpbmVkXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgdGhpcy5sb2NhbFN0b3JhZ2Uuc2V0KGtleSwgZGF0YSk7XG5cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHRoaXMubG9jYWxTdG9yYWdlLmRlbGV0ZShrZXkpO1xuXG4gICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIGNsZWFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgdGhpcy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcblxuICAgIHJldHVybiBvZih0cnVlKTtcblxuICB9XG5cbiAga2V5cygpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG5cbiAgICByZXR1cm4gb2YoQXJyYXkuZnJvbSh0aGlzLmxvY2FsU3RvcmFnZS5rZXlzKCkpKTtcblxuICB9XG5cbiAgaGFzKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICByZXR1cm4gb2YodGhpcy5sb2NhbFN0b3JhZ2UuaGFzKGtleSkpO1xuXG4gIH1cblxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEluZGV4ZWREQkRhdGFiYXNlIH0gZnJvbSAnLi9pbmRleGVkZGItZGF0YWJhc2UnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlRGF0YWJhc2UgfSBmcm9tICcuL2xvY2Fsc3RvcmFnZS1kYXRhYmFzZSc7XG5pbXBvcnQgeyBNb2NrTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vbW9jay1sb2NhbC1kYXRhYmFzZSc7XG5pbXBvcnQgeyBMT0NBTF9TVE9SQUdFX1BSRUZJWCB9IGZyb20gJy4uL3Rva2Vucyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbERhdGFiYXNlRmFjdG9yeShwbGF0Zm9ybUlkOiBPYmplY3QsIHByZWZpeDogc3RyaW5nIHwgbnVsbCkge1xuXG4gIGlmIChpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKSAmJiAoJ2luZGV4ZWREQicgaW4gd2luZG93KSAmJiAoaW5kZXhlZERCICE9PSB1bmRlZmluZWQpICYmIChpbmRleGVkREIgIT09IG51bGwpKSB7XG5cbiAgICAvKiBUcnkgd2l0aCBJbmRleGVkREIgaW4gbW9kZXJuIGJyb3dzZXJzICovXG4gICAgcmV0dXJuIG5ldyBJbmRleGVkREJEYXRhYmFzZShwcmVmaXgpO1xuXG4gIH0gZWxzZSBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkgJiYgKCdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdykgJiYgKGxvY2FsU3RvcmFnZSAhPT0gdW5kZWZpbmVkKSAmJiAobG9jYWxTdG9yYWdlICE9PSBudWxsKSkge1xuXG4gICAgLyogVHJ5IHdpdGggbG9jYWxTdG9yYWdlIGluIG9sZCBicm93c2VycyAoSUU5KSAqL1xuICAgIHJldHVybiBuZXcgTG9jYWxTdG9yYWdlRGF0YWJhc2UocHJlZml4KTtcblxuICB9IGVsc2Uge1xuXG4gICAgLyogRmFrZSBkYXRhYmFzZSBmb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nIChVbml2ZXJzYWwpICovXG4gICAgcmV0dXJuIG5ldyBNb2NrTG9jYWxEYXRhYmFzZSgpO1xuXG4gIH1cblxufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRmFjdG9yeTogbG9jYWxEYXRhYmFzZUZhY3RvcnksXG4gIGRlcHM6IFtcbiAgICBQTEFURk9STV9JRCxcbiAgICBbbmV3IE9wdGlvbmFsKCksIExPQ0FMX1NUT1JBR0VfUFJFRklYXVxuICBdXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExvY2FsRGF0YWJhc2Uge1xuXG4gIGFic3RyYWN0IHJlYWRvbmx5IHNpemU6IE9ic2VydmFibGU8bnVtYmVyPjtcblxuICBhYnN0cmFjdCBnZXRJdGVtPFQgPSBhbnk+KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUIHwgbnVsbD47XG4gIGFic3RyYWN0IHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gIGFic3RyYWN0IHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBhYnN0cmFjdCBjbGVhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBhYnN0cmFjdCBrZXlzKCk6IE9ic2VydmFibGU8c3RyaW5nW10+O1xuICBhYnN0cmFjdCBoYXMoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG59XG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApXHJcbiAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEpTT05TY2hlbWEgfSBmcm9tICcuL2pzb24tc2NoZW1hJztcblxuLyoqXG4gKiBAdG9kbyBBZGQgb3RoZXIgSlNPTiBTY2hlbWEgdmFsaWRhdGlvbiBmZWF0dXJlc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBKU09OVmFsaWRhdG9yIHtcblxuICAvKipcbiAgICogVmFsaWRhdGUgYSBKU09OIGRhdGEgYWdhaW5zdCBhIEpTT04gU2NoZW1hXG4gICAqIEBwYXJhbSBkYXRhIEpTT04gZGF0YSB0byB2YWxpZGF0ZVxuICAgKiBAcGFyYW0gc2NoZW1hIFN1YnNldCBvZiBKU09OIFNjaGVtYS5cbiAgICogVHlwZXMgYXJlIGVuZm9yY2VkIHRvIHZhbGlkYXRlIGV2ZXJ5dGhpbmc6XG4gICAqIGVhY2ggdmFsdWUgTVVTVCBoYXZlICd0eXBlJyBvciAncHJvcGVydGllcycgb3IgJ2l0ZW1zJyBvciAnY29uc3QnIG9yICdlbnVtJy5cbiAgICogVGhlcmVmb3JlLCB1bmxpa2UgdGhlIHNwZWMsIGJvb2xlYW5zIGFyZSBub3QgYWxsb3dlZCBhcyBzY2hlbWFzLlxuICAgKiBOb3QgYWxsIHZhbGlkYXRpb24gZmVhdHVyZXMgYXJlIHN1cHBvcnRlZDoganVzdCBmb2xsb3cgdGhlIGludGVyZmFjZS5cbiAgICogQHJldHVybnMgSWYgZGF0YSBpcyB2YWxpZCA6IHRydWUsIGlmIGl0IGlzIGludmFsaWQgOiBmYWxzZSwgYW5kIHRocm93cyBpZiB0aGUgc2NoZW1hIGlzIGludmFsaWRcbiAgICovXG4gIHZhbGlkYXRlKGRhdGE6IGFueSwgc2NoZW1hOiBKU09OU2NoZW1hKTogYm9vbGVhbiB7XG5cbiAgICAvKiogQHRvZG8gV2hlbiBUUyAyLjgsIGV4cGxvcmUgaWYgdGhpcyBpcyBwb3NzaWJsZSB3aXRoIGNvbmRpdGlvbmFsIHR5cGVzICovXG4gICAgaWYgKCgoIShzY2hlbWEuaGFzT3duUHJvcGVydHkoJ2NvbnN0JykgJiYgc2NoZW1hLmNvbnN0ICE9PSB1bmRlZmluZWQpXG4gICAgJiYgIShzY2hlbWEuaGFzT3duUHJvcGVydHkoJ2VudW0nKSAmJiBzY2hlbWEuZW51bSAhPSBudWxsKSAmJiAhKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgndHlwZScpICYmIHNjaGVtYS50eXBlICE9IG51bGwpKVxuICAgIHx8IHNjaGVtYS50eXBlID09PSAnYXJyYXknIHx8IHNjaGVtYS50eXBlID09PSAnb2JqZWN0JylcbiAgICAmJiAhKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgncHJvcGVydGllcycpICYmIHNjaGVtYS5wcm9wZXJ0aWVzICE9IG51bGwpICAmJiAhKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnaXRlbXMnKSAmJiBzY2hlbWEuaXRlbXMgIT0gbnVsbCkpIHtcblxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFYWNoIHZhbHVlIG11c3QgaGF2ZSBhICd0eXBlJyBvciAncHJvcGVydGllcycgb3IgJ2l0ZW1zJyBvciAnY29uc3QnIG9yICdlbnVtJywgdG8gZW5mb3JjZSBzdHJpY3QgdHlwZXMuYCk7XG5cbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdjb25zdCcpICYmIHNjaGVtYS5jb25zdCAhPT0gdW5kZWZpbmVkICYmIChkYXRhICE9PSBzY2hlbWEuY29uc3QpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnZhbGlkYXRlRW51bShkYXRhLCBzY2hlbWEpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnZhbGlkYXRlSXRlbXMoZGF0YSwgc2NoZW1hKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy52YWxpZGF0ZVByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy52YWxpZGF0ZVJlcXVpcmVkKGRhdGEsIHNjaGVtYSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9XG5cbiAgcHJvdGVjdGVkIGlzT2JqZWN0Tm90TnVsbCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG5cbiAgICByZXR1cm4gKHZhbHVlICE9PSBudWxsKSAmJiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jyk7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZVByb3BlcnRpZXMoZGF0YTogeyBbazogc3RyaW5nXTogYW55OyB9LCBzY2hlbWE6IEpTT05TY2hlbWEpOiBib29sZWFuIHtcblxuICAgIGlmICghc2NoZW1hLmhhc093blByb3BlcnR5KCdwcm9wZXJ0aWVzJykgfHwgKHNjaGVtYS5wcm9wZXJ0aWVzID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNPYmplY3ROb3ROdWxsKGRhdGEpKSB7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBvYmplY3QgZG9lc24ndCBoYXZlIG1vcmUgcHJvcGVydGllcyB0aGFuIGV4cGVjdGVkXG4gICAgICogRXF1aXZhbGVudCBvZiBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2VcbiAgICAgKi9cbiAgICBpZiAoT2JqZWN0LmtleXMoc2NoZW1hLnByb3BlcnRpZXMpLmxlbmd0aCA8IE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCkge1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICB9XG5cbiAgICAvKiBSZWN1cnNpdmVseSB2YWxpZGF0ZSBhbGwgcHJvcGVydGllcyAqL1xuICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gc2NoZW1hLnByb3BlcnRpZXMpIHtcblxuICAgICAgaWYgKHNjaGVtYS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiBkYXRhLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuXG4gICAgICAgIGlmICghdGhpcy52YWxpZGF0ZShkYXRhW3Byb3BlcnR5XSwgc2NoZW1hLnByb3BlcnRpZXNbcHJvcGVydHldKSkge1xuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZVJlcXVpcmVkKGRhdGE6IHt9LCBzY2hlbWE6IEpTT05TY2hlbWEpOiBib29sZWFuIHtcblxuICAgIGlmICghc2NoZW1hLmhhc093blByb3BlcnR5KCdyZXF1aXJlZCcpIHx8IChzY2hlbWEucmVxdWlyZWQgPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc09iamVjdE5vdE51bGwoZGF0YSkpIHtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgfVxuXG4gICAgZm9yIChjb25zdCByZXF1aXJlZFByb3Agb2Ygc2NoZW1hLnJlcXVpcmVkKSB7XG5cbiAgICAgIC8qIENoZWNrcyBpZiB0aGUgcHJvcGVydHkgaXMgcHJlc2VudCBpbiB0aGUgc2NoZW1hICdwcm9wZXJ0aWVzJyAqL1xuICAgICAgaWYgKCFzY2hlbWEucHJvcGVydGllcyB8fCAhc2NoZW1hLnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocmVxdWlyZWRQcm9wKSkge1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJ3JlcXVpcmVkJyBwcm9wZXJ0aWVzIG11c3QgYmUgZGVzY3JpYmVkIGluICdwcm9wZXJ0aWVzJyB0b28uYCk7XG5cbiAgICAgIH1cblxuICAgICAgLyogQ2hlY2tzIGlmIHRoZSBwcm9wZXJ0eSBpcyBwcmVzZW50IGluIHRoZSBkYXRhICovXG4gICAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkocmVxdWlyZWRQcm9wKSkge1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZUVudW0oZGF0YTogYW55LCBzY2hlbWE6IEpTT05TY2hlbWEpOiBib29sZWFuIHtcblxuICAgIGlmICghc2NoZW1hLmhhc093blByb3BlcnR5KCdlbnVtJykgfHwgKHNjaGVtYS5lbnVtID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKiogQHRvZG8gTW92ZSB0byBFUzIwMTYgLmluY2x1ZGVzKCkgPyAqL1xuICAgIHJldHVybiAoc2NoZW1hLmVudW0uaW5kZXhPZihkYXRhKSAhPT0gLTEpO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVUeXBlKGRhdGE6IGFueSwgc2NoZW1hOiBKU09OU2NoZW1hKTogYm9vbGVhbiB7XG5cbiAgICBpZiAoIXNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgndHlwZScpIHx8IChzY2hlbWEudHlwZSA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc3dpdGNoIChzY2hlbWEudHlwZSkge1xuXG4gICAgICBjYXNlICdudWxsJzpcbiAgICAgICAgcmV0dXJuIGRhdGEgPT09IG51bGw7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEpO1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU51bWJlcihkYXRhLCBzY2hlbWEpO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JztcbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGF0YSk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlSXRlbXMoZGF0YTogYW55W10sIHNjaGVtYTogSlNPTlNjaGVtYSk6IGJvb2xlYW4ge1xuXG4gICAgaWYgKCFzY2hlbWEuaGFzT3duUHJvcGVydHkoJ2l0ZW1zJykgfHwgKHNjaGVtYS5pdGVtcyA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIH1cblxuICAgIGlmIChzY2hlbWEuaGFzT3duUHJvcGVydHkoJ21heEl0ZW1zJykgJiYgKHNjaGVtYS5tYXhJdGVtcyAhPSBudWxsKSkge1xuXG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoc2NoZW1hLm1heEl0ZW1zKSB8fCBzY2hlbWEubWF4SXRlbXMgPCAwKSB7XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnbWF4SXRlbXMnIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlci5gKTtcblxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4SXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnbWluSXRlbXMnKSAmJiAoc2NoZW1hLm1pbkl0ZW1zICE9IG51bGwpKSB7XG5cbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzY2hlbWEubWluSXRlbXMpIHx8IHNjaGVtYS5taW5JdGVtcyA8IDApIHtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCdtaW5JdGVtcycgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLmApO1xuXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHNjaGVtYS5taW5JdGVtcykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCd1bmlxdWVJdGVtcycpICYmIChzY2hlbWEudW5pcXVlSXRlbXMgIT0gbnVsbCkpIHtcblxuICAgICAgaWYgKHNjaGVtYS51bmlxdWVJdGVtcykge1xuXG4gICAgICAgIGNvbnN0IGRhdGFTZXQgPSBuZXcgU2V0KGRhdGEpO1xuXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCAhPT0gZGF0YVNldC5zaXplKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYS5pdGVtcykpIHtcblxuICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVJdGVtc0xpc3QoZGF0YSwgc2NoZW1hKTtcblxuICAgIH1cblxuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgZGF0YSkge1xuXG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGUodmFsdWUsIHNjaGVtYS5pdGVtcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZUl0ZW1zTGlzdChkYXRhOiBhbnksIHNjaGVtYTogSlNPTlNjaGVtYSk6IGJvb2xlYW4ge1xuXG4gICAgY29uc3QgaXRlbXMgPSBzY2hlbWEuaXRlbXMgYXMgSlNPTlNjaGVtYVtdO1xuXG4gICAgaWYgKGRhdGEubGVuZ3RoICE9PSBpdGVtcy5sZW5ndGgpIHtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuXG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGUoZGF0YVtpXSwgaXRlbXNbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVTdHJpbmcoZGF0YTogYW55LCBzY2hlbWE6IEpTT05TY2hlbWEpOiBib29sZWFuIHtcblxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdtYXhMZW5ndGgnKSAmJiAoc2NoZW1hLm1heExlbmd0aCAhPSBudWxsKSkge1xuXG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoc2NoZW1hLm1heExlbmd0aCkgfHwgc2NoZW1hLm1heExlbmd0aCA8IDApIHtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCdtYXhMZW5ndGgnIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlci5gKTtcblxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIGlmIChzY2hlbWEuaGFzT3duUHJvcGVydHkoJ21pbkxlbmd0aCcpICYmIChzY2hlbWEubWluTGVuZ3RoICE9IG51bGwpKSB7XG5cbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzY2hlbWEubWluTGVuZ3RoKSB8fCBzY2hlbWEubWluTGVuZ3RoIDwgMCkge1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJ21pbkxlbmd0aCcgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLmApO1xuXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHNjaGVtYS5taW5MZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgncGF0dGVybicpICYmIChzY2hlbWEucGF0dGVybiAhPSBudWxsKSkge1xuXG4gICAgICBjb25zdCByZWd1bGFyRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoc2NoZW1hLnBhdHRlcm4pO1xuXG4gICAgICBpZiAoIXJlZ3VsYXJFeHByZXNzaW9uLnRlc3QoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZU51bWJlcihkYXRhOiBhbnksIHNjaGVtYTogSlNPTlNjaGVtYSk6IGJvb2xlYW4ge1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICgoc2NoZW1hLnR5cGUgPT09ICdpbnRlZ2VyJykgJiYgIU51bWJlci5pc0ludGVnZXIoZGF0YSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdtdWx0aXBsZU9mJykgJiYgKHNjaGVtYS5tdWx0aXBsZU9mICE9IG51bGwpKSB7XG5cbiAgICAgIGlmIChzY2hlbWEubXVsdGlwbGVPZiA8PSAwKSB7XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnbXVsdGlwbGVPZicgbXVzdCBiZSBhIG51bWJlciBzdHJpY3RseSBncmVhdGVyIHRoYW4gMC5gKTtcblxuICAgICAgfVxuXG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoZGF0YSAvIHNjaGVtYS5tdWx0aXBsZU9mKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdtYXhpbXVtJykgJiYgKHNjaGVtYS5tYXhpbXVtICE9IG51bGwpKSB7XG5cbiAgICAgIGlmIChkYXRhID4gc2NoZW1hLm1heGltdW0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnZXhjbHVzaXZlTWF4aW11bScpICYmIChzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSAhPSBudWxsKSkge1xuXG4gICAgICBpZiAoZGF0YSA+PSBzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAoc2NoZW1hLmhhc093blByb3BlcnR5KCdtaW5pbXVtJykgJiYgKHNjaGVtYS5taW5pbXVtICE9IG51bGwpKSB7XG5cbiAgICAgIGlmIChkYXRhIDwgc2NoZW1hLm1pbmltdW0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKHNjaGVtYS5oYXNPd25Qcm9wZXJ0eSgnZXhjbHVzaXZlTWluaW11bScpICYmIChzY2hlbWEuZXhjbHVzaXZlTWluaW11bSAhPSBudWxsKSkge1xuXG4gICAgICBpZiAoZGF0YSA8PSBzY2hlbWEuZXhjbHVzaXZlTWluaW11bSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcblxuICB9XG5cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vZGF0YWJhc2VzL2xvY2FsLWRhdGFiYXNlJztcbmltcG9ydCB7IEpTT05TY2hlbWEgfSBmcm9tICcuL3ZhbGlkYXRpb24vanNvbi1zY2hlbWEnO1xuaW1wb3J0IHsgSlNPTlZhbGlkYXRvciB9IGZyb20gJy4vdmFsaWRhdGlvbi9qc29uLXZhbGlkYXRvcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTFNHZXRJdGVtT3B0aW9ucyB7XG4gIHNjaGVtYT86IEpTT05TY2hlbWEgfCBudWxsO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2Uge1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgaXRlbXMgaW4gdGhlIHN0b3JhZ2VcbiAgICovXG4gIGdldCBzaXplKCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5zaXplO1xuXG4gIH1cblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZ2V0SXRlbU9wdGlvbnNEZWZhdWx0OiBMU0dldEl0ZW1PcHRpb25zID0ge1xuICAgIHNjaGVtYTogbnVsbFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkYXRhYmFzZTogTG9jYWxEYXRhYmFzZSwgcHJvdGVjdGVkIGpzb25WYWxpZGF0b3I6IEpTT05WYWxpZGF0b3IpIHt9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gaXRlbSB2YWx1ZSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgVGhlIGl0ZW0ncyB2YWx1ZSBpZiB0aGUga2V5IGV4aXN0cywgbnVsbCBvdGhlcndpc2UsIHdyYXBwZWQgaW4gYW4gUnhKUyBPYnNlcnZhYmxlXG4gICAqL1xuICBnZXRJdGVtPFQgPSBhbnk+KGtleTogc3RyaW5nLCBvcHRpb25zOiBMU0dldEl0ZW1PcHRpb25zICYgeyBzY2hlbWE6IEpTT05TY2hlbWEgfSk6IE9ic2VydmFibGU8VCB8IG51bGw+O1xuICBnZXRJdGVtPFQgPSBhbnk+KGtleTogc3RyaW5nLCBvcHRpb25zPzogTFNHZXRJdGVtT3B0aW9ucyk6IE9ic2VydmFibGU8dW5rbm93bj47XG4gIGdldEl0ZW08VCA9IGFueT4oa2V5OiBzdHJpbmcsIG9wdGlvbnMgPSB0aGlzLmdldEl0ZW1PcHRpb25zRGVmYXVsdCkge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UuZ2V0SXRlbTxUPihrZXkpLnBpcGUoXG5cbiAgICAgIC8qIFZhbGlkYXRlIGRhdGEgdXBvbiBhIGpzb24gc2NoZW1hIGlmIHJlcXVlc3RlZCAqL1xuICAgICAgbWVyZ2VNYXAoKGRhdGEpID0+IHtcblxuICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuXG4gICAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5zY2hlbWEpIHtcblxuICAgICAgICAgIGxldCB2YWxpZGF0aW9uID0gdHJ1ZTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uID0gdGhpcy5qc29uVmFsaWRhdG9yLnZhbGlkYXRlKGRhdGEsIG9wdGlvbnMuc2NoZW1hKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdmFsaWRhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IobmV3IEVycm9yKGBKU09OIGludmFsaWRgKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2YoZGF0YSBhcyB1bmtub3duKTtcblxuICAgICAgfSkpO1xuXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBpdGVtIHZhbHVlIGluIGxvY2FsIHN0b3JhZ2UgV0lUSE9VVCBhbnkgdmFsaWRhdGlvbi5cbiAgICogSXQgaXMgYSBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGRldmVsb3BtZW50IG9ubHk6IGRvIE5PVCB1c2UgaXQgaW4gcHJvZHVjdGlvbiBjb2RlLFxuICAgKiBhcyBpdCBjYW4gY2F1c2Ugc2VjdXJpdHkgaXNzdWVzIGFuZCBlcnJvcnMgYW5kIG1heSBiZSByZW1vdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucy5cbiAgICogVXNlIHRoZSBub3JtYWwgLmdldEl0ZW0oKSBtZXRob2QgaW5zdGVhZC5cbiAgICogQGlnbm9yZVxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIFRoZSBpdGVtJ3MgdmFsdWUgaWYgdGhlIGtleSBleGlzdHMsIG51bGwgb3RoZXJ3aXNlLCB3cmFwcGVkIGluIGFuIFJ4SlMgT2JzZXJ2YWJsZVxuICAgKi9cbiAgZ2V0VW5zYWZlSXRlbTxUID0gYW55PihrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8VCB8IG51bGw+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLmdldEl0ZW08VD4oa2V5KTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHBhcmFtIGRhdGEgVGhlIGl0ZW0ncyB2YWx1ZSwgbXVzdCBOT1QgYmUgbnVsbCBvciB1bmRlZmluZWRcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICBzZXRJdGVtKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLnNldEl0ZW0oa2V5LCBkYXRhKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gaXRlbSBpbiBsb2NhbCBzdG9yYWdlXG4gICAqIEBwYXJhbSBrZXkgVGhlIGl0ZW0ncyBrZXlcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhYmFzZS5yZW1vdmVJdGVtKGtleSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCBpdGVtcyBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICogQHJldHVybnMgQW4gUnhKUyBPYnNlcnZhYmxlIHRvIHdhaXQgdGhlIGVuZCBvZiB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICBjbGVhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLmNsZWFyKCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIGtleXMgc3RvcmVkIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHJldHVybnMgQSBSeEpTIE9ic2VydmFibGUgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSBpbmRleGVzXG4gICAqL1xuICBrZXlzKCk6IE9ic2VydmFibGU8c3RyaW5nW10+IHtcblxuICAgIHJldHVybiB0aGlzLmRhdGFiYXNlLmtleXMoKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFRlbGxzIGlmIGEga2V5IGV4aXN0cyBpbiBzdG9yYWdlXG4gICAqIEByZXR1cm5zIEEgUnhKUyBPYnNlcnZhYmxlIHRlbGxpbmcgaWYgdGhlIGtleSBleGlzdHNcbiAgICovXG4gIGhhcyhrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgcmV0dXJuIHRoaXMuZGF0YWJhc2UuaGFzKGtleSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZSwgYW5kIGF1dG8tc3Vic2NyaWJlc1xuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIFRoZSBpdGVtJ3MgdmFsdWUsIG11c3QgTk9UIGJlIG51bGwgb3IgdW5kZWZpbmVkXG4gICAqL1xuICBzZXRJdGVtU3Vic2NyaWJlKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkIHtcblxuICAgIHRoaXMuc2V0SXRlbShrZXksIGRhdGEpLnN1YnNjcmliZSgoKSA9PiB7fSwgKCkgPT4ge30pO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbiBpdGVtIGluIGxvY2FsIHN0b3JhZ2UsIGFuZCBhdXRvLXN1YnNjcmliZXNcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKi9cbiAgIHJlbW92ZUl0ZW1TdWJzY3JpYmUoa2V5OiBzdHJpbmcpOiB2b2lkIHtcblxuICAgIHRoaXMucmVtb3ZlSXRlbShrZXkpLnN1YnNjcmliZSgoKSA9PiB7fSwgKCkgPT4ge30pO1xuXG4gIH1cblxuICAvKiogRGVsZXRlcyBhbGwgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlLCBhbmQgYXV0by1zdWJzY3JpYmVzICovXG4gIGNsZWFyU3Vic2NyaWJlKCk6IHZvaWQge1xuXG4gICAgdGhpcy5jbGVhcigpLnN1YnNjcmliZSgoKSA9PiB7fSwgKCkgPT4ge30pO1xuXG4gIH1cblxufVxuIl0sIm5hbWVzIjpbIkluamVjdGlvblRva2VuIiwib2YiLCJ0aHJvd0Vycm9yIiwiSW5qZWN0YWJsZSIsIk9wdGlvbmFsIiwiSW5qZWN0IiwiUmVwbGF5U3ViamVjdCIsIm1lcmdlTWFwIiwiZnJvbUV2ZW50IiwibWFwIiwicmFjZSIsImZpcnN0IiwidGFwIiwiaXNQbGF0Zm9ybUJyb3dzZXIiLCJQTEFURk9STV9JRCIsInRzbGliXzEuX192YWx1ZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUVBLFFBQWEsb0JBQW9CLEdBQUcsSUFBSUEsaUJBQWMsQ0FBUyxvQkFBb0IsRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLGNBQU0sT0FBQSxFQUFFLEdBQUEsRUFBRSxDQUFDOzs7OztBQVEvSCxhQUFnQixxQkFBcUIsQ0FBQyxNQUFtQztRQUN2RSxPQUFPO1lBQ0wsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7U0FDaEYsQ0FBQztJQUNKLENBQUM7Ozs7OztBQ2REO1FBa0JFLDhCQUFnRSxVQUFnQztZQUFoQywyQkFBQTtnQkFBQSxpQkFBZ0M7O1lBQWhDLGVBQVUsR0FBVixVQUFVLENBQXNCOztZQU50RixXQUFNLEdBQUcsRUFBRSxDQUFDO1lBUXBCLElBQUksVUFBVSxFQUFFO2dCQUNkLElBQUksQ0FBQyxNQUFNLEdBQU0sVUFBVSxNQUFHLENBQUM7YUFDaEM7U0FFRjtRQVZELHNCQUFJLHNDQUFJOzs7Z0JBQVI7Z0JBQ0UsT0FBT0MsT0FBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNoQzs7O1dBQUE7Ozs7Ozs7Ozs7OztRQWVELHNDQUFPOzs7Ozs7WUFBUCxVQUFpQixHQUFXOztvQkFFcEIsWUFBWSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUssQ0FBQzs7b0JBQzdELFVBQVUsR0FBYSxJQUFJO2dCQUUvQixJQUFJLFlBQVksSUFBSSxJQUFJLEVBQUU7b0JBRXhCLElBQUk7d0JBQ0YsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7cUJBQ3ZDO29CQUFDLE9BQU8sS0FBSyxFQUFFO3dC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