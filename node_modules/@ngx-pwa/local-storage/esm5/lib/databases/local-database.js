/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, PLATFORM_ID, Optional } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { IndexedDBDatabase } from './indexeddb-database';
import { LocalStorageDatabase } from './localstorage-database';
import { MockLocalDatabase } from './mock-local-database';
import { LOCAL_STORAGE_PREFIX } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "../tokens";
/**
 * @param {?} platformId
 * @param {?} prefix
 * @return {?}
 */
export function localDatabaseFactory(platformId, prefix) {
    if (isPlatformBrowser(platformId) && ('indexedDB' in window) && (indexedDB !== undefined) && (indexedDB !== null)) {
        /* Try with IndexedDB in modern browsers */
        return new IndexedDBDatabase(prefix);
    }
    else if (isPlatformBrowser(platformId) && ('localStorage' in window) && (localStorage !== undefined) && (localStorage !== null)) {
        /* Try with localStorage in old browsers (IE9) */
        return new LocalStorageDatabase(prefix);
    }
    else {
        /* Fake database for server-side rendering (Universal) */
        return new MockLocalDatabase();
    }
}
/**
 * @abstract
 */
var LocalDatabase = /** @class */ (function () {
    function LocalDatabase() {
    }
    LocalDatabase.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                    useFactory: localDatabaseFactory,
                    deps: [
                        PLATFORM_ID,
                        [new Optional(), LOCAL_STORAGE_PREFIX]
                    ]
                },] }
    ];
    /** @nocollapse */ LocalDatabase.ngInjectableDef = i0.defineInjectable({ factory: function LocalDatabase_Factory() { return localDatabaseFactory(i0.inject(i0.PLATFORM_ID), i0.inject(i1.LOCAL_STORAGE_PREFIX, 8)); }, token: LocalDatabase, providedIn: "root" });
    return LocalDatabase;
}());
export { LocalDatabase };
if (false) {
    /** @type {?} */
    LocalDatabase.prototype.size;
    /**
     * @abstract
     * @template T
     * @param {?} key
     * @return {?}
     */
    LocalDatabase.prototype.getItem = function (key) { };
    /**
     * @abstract
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    LocalDatabase.prototype.setItem = function (key, data) { };
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    LocalDatabase.prototype.removeItem = function (key) { };
    /**
     * @abstract
     * @return {?}
     */
    LocalDatabase.prototype.clear = function () { };
    /**
     * @abstract
     * @return {?}
     */
    LocalDatabase.prototype.keys = function () { };
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    LocalDatabase.prototype.has = function (key) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtZGF0YWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL2RhdGFiYXNlcy9sb2NhbC1kYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3BELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7Ozs7Ozs7QUFFakQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLFVBQWtCLEVBQUUsTUFBcUI7SUFFNUUsSUFBSSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsRUFBRTtRQUVqSCwyQ0FBMkM7UUFDM0MsT0FBTyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBRXRDO1NBQU0sSUFBSSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsRUFBRTtRQUVqSSxpREFBaUQ7UUFDakQsT0FBTyxJQUFJLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBRXpDO1NBQU07UUFFTCx5REFBeUQ7UUFDekQsT0FBTyxJQUFJLGlCQUFpQixFQUFFLENBQUM7S0FFaEM7QUFFSCxDQUFDOzs7O0FBRUQ7SUFBQTtLQW1CQzs7Z0JBbkJBLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtvQkFDbEIsVUFBVSxFQUFFLG9CQUFvQjtvQkFDaEMsSUFBSSxFQUFFO3dCQUNKLFdBQVc7d0JBQ1gsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLG9CQUFvQixDQUFDO3FCQUN2QztpQkFDRjs7O3dCQXJDRDtDQWlEQyxBQW5CRCxJQW1CQztTQVhxQixhQUFhOzs7SUFFakMsNkJBQTJDOzs7Ozs7O0lBRTNDLHFEQUE2RDs7Ozs7OztJQUM3RCwyREFBOEQ7Ozs7OztJQUM5RCx3REFBc0Q7Ozs7O0lBQ3RELGdEQUFzQzs7Ozs7SUFDdEMsK0NBQXNDOzs7Ozs7SUFDdEMsaURBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUExBVEZPUk1fSUQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEluZGV4ZWREQkRhdGFiYXNlIH0gZnJvbSAnLi9pbmRleGVkZGItZGF0YWJhc2UnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlRGF0YWJhc2UgfSBmcm9tICcuL2xvY2Fsc3RvcmFnZS1kYXRhYmFzZSc7XG5pbXBvcnQgeyBNb2NrTG9jYWxEYXRhYmFzZSB9IGZyb20gJy4vbW9jay1sb2NhbC1kYXRhYmFzZSc7XG5pbXBvcnQgeyBMT0NBTF9TVE9SQUdFX1BSRUZJWCB9IGZyb20gJy4uL3Rva2Vucyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbERhdGFiYXNlRmFjdG9yeShwbGF0Zm9ybUlkOiBPYmplY3QsIHByZWZpeDogc3RyaW5nIHwgbnVsbCkge1xuXG4gIGlmIChpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKSAmJiAoJ2luZGV4ZWREQicgaW4gd2luZG93KSAmJiAoaW5kZXhlZERCICE9PSB1bmRlZmluZWQpICYmIChpbmRleGVkREIgIT09IG51bGwpKSB7XG5cbiAgICAvKiBUcnkgd2l0aCBJbmRleGVkREIgaW4gbW9kZXJuIGJyb3dzZXJzICovXG4gICAgcmV0dXJuIG5ldyBJbmRleGVkREJEYXRhYmFzZShwcmVmaXgpO1xuXG4gIH0gZWxzZSBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkgJiYgKCdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdykgJiYgKGxvY2FsU3RvcmFnZSAhPT0gdW5kZWZpbmVkKSAmJiAobG9jYWxTdG9yYWdlICE9PSBudWxsKSkge1xuXG4gICAgLyogVHJ5IHdpdGggbG9jYWxTdG9yYWdlIGluIG9sZCBicm93c2VycyAoSUU5KSAqL1xuICAgIHJldHVybiBuZXcgTG9jYWxTdG9yYWdlRGF0YWJhc2UocHJlZml4KTtcblxuICB9IGVsc2Uge1xuXG4gICAgLyogRmFrZSBkYXRhYmFzZSBmb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nIChVbml2ZXJzYWwpICovXG4gICAgcmV0dXJuIG5ldyBNb2NrTG9jYWxEYXRhYmFzZSgpO1xuXG4gIH1cblxufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRmFjdG9yeTogbG9jYWxEYXRhYmFzZUZhY3RvcnksXG4gIGRlcHM6IFtcbiAgICBQTEFURk9STV9JRCxcbiAgICBbbmV3IE9wdGlvbmFsKCksIExPQ0FMX1NUT1JBR0VfUFJFRklYXVxuICBdXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExvY2FsRGF0YWJhc2Uge1xuXG4gIGFic3RyYWN0IHJlYWRvbmx5IHNpemU6IE9ic2VydmFibGU8bnVtYmVyPjtcblxuICBhYnN0cmFjdCBnZXRJdGVtPFQgPSBhbnk+KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUIHwgbnVsbD47XG4gIGFic3RyYWN0IHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gIGFic3RyYWN0IHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBhYnN0cmFjdCBjbGVhcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBhYnN0cmFjdCBrZXlzKCk6IE9ic2VydmFibGU8c3RyaW5nW10+O1xuICBhYnN0cmFjdCBoYXMoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG59XG4iXX0=