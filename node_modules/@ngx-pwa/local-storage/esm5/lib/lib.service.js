/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { throwError, of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { LocalDatabase } from './databases/local-database';
import { JSONValidator } from './validation/json-validator';
import * as i0 from "@angular/core";
import * as i1 from "./databases/local-database";
import * as i2 from "./validation/json-validator";
/**
 * @record
 */
export function LSGetItemOptions() { }
if (false) {
    /** @type {?|undefined} */
    LSGetItemOptions.prototype.schema;
}
var LocalStorage = /** @class */ (function () {
    function LocalStorage(database, jsonValidator) {
        this.database = database;
        this.jsonValidator = jsonValidator;
        this.getItemOptionsDefault = {
            schema: null
        };
    }
    Object.defineProperty(LocalStorage.prototype, "size", {
        /**
         * Number of items in the storage
         */
        get: /**
         * Number of items in the storage
         * @return {?}
         */
        function () {
            return this.database.size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template T
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    LocalStorage.prototype.getItem = /**
     * @template T
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        var _this = this;
        if (options === void 0) { options = this.getItemOptionsDefault; }
        return this.database.getItem(key).pipe(
        /* Validate data upon a json schema if requested */
        mergeMap(function (data) {
            if (data === null) {
                return of(null);
            }
            else if (options.schema) {
                /** @type {?} */
                var validation = true;
                try {
                    validation = _this.jsonValidator.validate(data, options.schema);
                }
                catch (error) {
                    return throwError(error);
                }
                if (!validation) {
                    return throwError(new Error("JSON invalid"));
                }
            }
            return of((/** @type {?} */ (data)));
        }));
    };
    /**
     * Gets an item value in local storage WITHOUT any validation.
     * It is a convenience method for development only: do NOT use it in production code,
     * as it can cause security issues and errors and may be removed in future versions.
     * Use the normal .getItem() method instead.
     * @ignore
     * @deprecated
     * @param key The item's key
     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    /**
     * Gets an item value in local storage WITHOUT any validation.
     * It is a convenience method for development only: do NOT use it in production code,
     * as it can cause security issues and errors and may be removed in future versions.
     * Use the normal .getItem() method instead.
     * @ignore
     * @deprecated
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    LocalStorage.prototype.getUnsafeItem = /**
     * Gets an item value in local storage WITHOUT any validation.
     * It is a convenience method for development only: do NOT use it in production code,
     * as it can cause security issues and errors and may be removed in future versions.
     * Use the normal .getItem() method instead.
     * @ignore
     * @deprecated
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    function (key) {
        return this.database.getItem(key);
    };
    /**
     * Sets an item in local storage
     * @param key The item's key
     * @param data The item's value, must NOT be null or undefined
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorage.prototype.setItem = /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function (key, data) {
        return this.database.setItem(key, data);
    };
    /**
     * Deletes an item in local storage
     * @param key The item's key
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorage.prototype.removeItem = /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function (key) {
        return this.database.removeItem(key);
    };
    /**
     * Deletes all items from local storage
     * @returns An RxJS Observable to wait the end of the operation
     */
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    LocalStorage.prototype.clear = /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    function () {
        return this.database.clear();
    };
    /**
     * Get all keys stored in local storage
     * @returns A RxJS Observable returning an array of the indexes
     */
    /**
     * Get all keys stored in local storage
     * @return {?} A RxJS Observable returning an array of the indexes
     */
    LocalStorage.prototype.keys = /**
     * Get all keys stored in local storage
     * @return {?} A RxJS Observable returning an array of the indexes
     */
    function () {
        return this.database.keys();
    };
    /**
     * Tells if a key exists in storage
     * @returns A RxJS Observable telling if the key exists
     */
    /**
     * Tells if a key exists in storage
     * @param {?} key
     * @return {?} A RxJS Observable telling if the key exists
     */
    LocalStorage.prototype.has = /**
     * Tells if a key exists in storage
     * @param {?} key
     * @return {?} A RxJS Observable telling if the key exists
     */
    function (key) {
        return this.database.has(key);
    };
    /**
     * Sets an item in local storage, and auto-subscribes
     * @param key The item's key
     * @param data The item's value, must NOT be null or undefined
     */
    /**
     * Sets an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?}
     */
    LocalStorage.prototype.setItemSubscribe = /**
     * Sets an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?}
     */
    function (key, data) {
        this.setItem(key, data).subscribe(function () { }, function () { });
    };
    /**
     * Deletes an item in local storage, and auto-subscribes
     * @param key The item's key
     */
    /**
     * Deletes an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @return {?}
     */
    LocalStorage.prototype.removeItemSubscribe = /**
     * Deletes an item in local storage, and auto-subscribes
     * @param {?} key The item's key
     * @return {?}
     */
    function (key) {
        this.removeItem(key).subscribe(function () { }, function () { });
    };
    /** Deletes all items from local storage, and auto-subscribes */
    /**
     * Deletes all items from local storage, and auto-subscribes
     * @return {?}
     */
    LocalStorage.prototype.clearSubscribe = /**
     * Deletes all items from local storage, and auto-subscribes
     * @return {?}
     */
    function () {
        this.clear().subscribe(function () { }, function () { });
    };
    LocalStorage.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LocalStorage.ctorParameters = function () { return [
        { type: LocalDatabase },
        { type: JSONValidator }
    ]; };
    /** @nocollapse */ LocalStorage.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorage_Factory() { return new LocalStorage(i0.inject(i1.LocalDatabase), i0.inject(i2.JSONValidator)); }, token: LocalStorage, providedIn: "root" });
    return LocalStorage;
}());
export { LocalStorage };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    LocalStorage.prototype.getItemOptionsDefault;
    /**
     * @type {?}
     * @protected
     */
    LocalStorage.prototype.database;
    /**
     * @type {?}
     * @protected
     */
    LocalStorage.prototype.jsonValidator;
}
//# sourceMappingURL=data:application/json;base64,