/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function JSONSchemaConst() { }
if (false) {
    /**
     * Checks if a value is strictly equal to this.
     * Can't be an object or array, as two objects or arrays are never equal.
     * @type {?}
     */
    JSONSchemaConst.prototype.const;
}
/**
 * @record
 */
export function JSONSchemaEnum() { }
if (false) {
    /**
     * Checks if a value is strictly equal to one of the value of enum.
     * Can't be an object or array, as two objects or arrays are never equal.
     * @type {?}
     */
    JSONSchemaEnum.prototype.enum;
}
/**
 * @record
 */
export function JSONSchemaBoolean() { }
if (false) {
    /**
     * Type for a boolean value.
     * @type {?}
     */
    JSONSchemaBoolean.prototype.type;
}
/**
 * @record
 */
export function JSONSchemaNull() { }
if (false) {
    /**
     * Type for a null value.
     * @type {?}
     */
    JSONSchemaNull.prototype.type;
}
/**
 * @record
 */
export function JSONSchemaString() { }
if (false) {
    /**
     * Type for a string value.
     * @type {?}
     */
    JSONSchemaString.prototype.type;
    /**
     * Maxium length for a string.
     * Must be a non-negative integer.
     * @type {?|undefined}
     */
    JSONSchemaString.prototype.maxLength;
    /**
     * Minimum length for a string.
     * Must be a non-negative integer.
     * @type {?|undefined}
     */
    JSONSchemaString.prototype.minLength;
    /**
     * Pattern to match for a string.
     * Must be a valid regular expression, WITHOUT the / delimiters.
     * @type {?|undefined}
     */
    JSONSchemaString.prototype.pattern;
}
/**
 * @record
 */
export function JSONSchemaNumeric() { }
if (false) {
    /** @type {?} */
    JSONSchemaNumeric.prototype.type;
    /**
     * Check if a number is a multiple of x.
     * Must be strictly greater than 0.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.multipleOf;
    /**
     * Check if a number is less or equal than this maximum.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.maximum;
    /**
     * Check if a number is strictly less than this maximum.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.exclusiveMaximum;
    /**
     * Check if a number is greater or equal than this minimum.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.minimum;
    /**
     * Check if a number is strictly greater than this minimum.
     * @type {?|undefined}
     */
    JSONSchemaNumeric.prototype.exclusiveMinimum;
}
/**
 * @record
 */
export function JSONSchemaArray() { }
if (false) {
    /**
     * Type for an array value. Avoid to explicit this, "items" is enough,
     * @type {?|undefined}
     */
    JSONSchemaArray.prototype.type;
    /**
     * Schema for the values of an array.
     * 'type' of values should be a string (not an array of type).
     * @type {?}
     */
    JSONSchemaArray.prototype.items;
    /**
     * Check if an array length is less or equal to this value.
     * Must be a non negative integer.
     * @type {?|undefined}
     */
    JSONSchemaArray.prototype.maxItems;
    /**
     * Check if an array length is greater or equal to this value.
     * Must be a non negative integer.
     * @type {?|undefined}
     */
    JSONSchemaArray.prototype.minItems;
    /**
     * Check if an array only have unique values.
     * @type {?|undefined}
     */
    JSONSchemaArray.prototype.uniqueItems;
}
/**
 * @record
 */
export function JSONSchemaObject() { }
if (false) {
    /**
     * Type for an object value.  Avoid to explicit this, "properties" is enough,
     * @type {?|undefined}
     */
    JSONSchemaObject.prototype.type;
    /**
     * List of properties schemas for an object.
     * @type {?}
     */
    JSONSchemaObject.prototype.properties;
    /**
     * Array of names of the required properties for an object.
     * Properties set as required should be present in 'properties' too.
     * Note that in the last spec, booleans are not supported anymore.
     * @type {?|undefined}
     */
    JSONSchemaObject.prototype.required;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1zY2hlbWEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LXB3YS9sb2NhbC1zdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRpb24vanNvbi1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHFDQVFDOzs7Ozs7O0lBRkMsZ0NBQXdDOzs7OztBQUkxQyxvQ0FRQzs7Ozs7OztJQUZDLDhCQUEyQzs7Ozs7QUFJN0MsdUNBT0M7Ozs7OztJQUZDLGlDQUFnQjs7Ozs7QUFJbEIsb0NBT0M7Ozs7OztJQUZDLDhCQUFhOzs7OztBQUlmLHNDQXlCQzs7Ozs7O0lBcEJDLGdDQUFlOzs7Ozs7SUFNZixxQ0FBbUI7Ozs7OztJQU1uQixxQ0FBbUI7Ozs7OztJQU1uQixtQ0FBaUI7Ozs7O0FBSW5CLHVDQThCQzs7O0lBNUJDLGlDQUEyQjs7Ozs7O0lBTTNCLHVDQUFvQjs7Ozs7SUFLcEIsb0NBQWlCOzs7OztJQUtqQiw2Q0FBMEI7Ozs7O0lBSzFCLG9DQUFpQjs7Ozs7SUFLakIsNkNBQTBCOzs7OztBQUk1QixxQ0E4QkM7Ozs7OztJQXpCQywrQkFBZTs7Ozs7O0lBTWYsZ0NBQWlDOzs7Ozs7SUFNakMsbUNBQWtCOzs7Ozs7SUFNbEIsbUNBQWtCOzs7OztJQUtsQixzQ0FBc0I7Ozs7O0FBSXhCLHNDQXFCQzs7Ozs7O0lBaEJDLGdDQUFnQjs7Ozs7SUFLaEIsc0NBRUU7Ozs7Ozs7SUFPRixvQ0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIEpTT05TY2hlbWFDb25zdCB7XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIHZhbHVlIGlzIHN0cmljdGx5IGVxdWFsIHRvIHRoaXMuXG4gICAqIENhbid0IGJlIGFuIG9iamVjdCBvciBhcnJheSwgYXMgdHdvIG9iamVjdHMgb3IgYXJyYXlzIGFyZSBuZXZlciBlcXVhbC5cbiAgICovXG4gIGNvbnN0OiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbDtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpTT05TY2hlbWFFbnVtIHtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgdmFsdWUgaXMgc3RyaWN0bHkgZXF1YWwgdG8gb25lIG9mIHRoZSB2YWx1ZSBvZiBlbnVtLlxuICAgKiBDYW4ndCBiZSBhbiBvYmplY3Qgb3IgYXJyYXksIGFzIHR3byBvYmplY3RzIG9yIGFycmF5cyBhcmUgbmV2ZXIgZXF1YWwuXG4gICAqL1xuICBlbnVtOiAoc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IG51bGwpW107XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hQm9vbGVhbiB7XG5cbiAgLyoqXG4gICAqIFR5cGUgZm9yIGEgYm9vbGVhbiB2YWx1ZS5cbiAgICovXG4gIHR5cGU6ICdib29sZWFuJztcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpTT05TY2hlbWFOdWxsIHtcblxuICAvKipcbiAgICogVHlwZSBmb3IgYSBudWxsIHZhbHVlLlxuICAgKi9cbiAgdHlwZTogJ251bGwnO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSlNPTlNjaGVtYVN0cmluZyB7XG5cbiAgLyoqXG4gICAqIFR5cGUgZm9yIGEgc3RyaW5nIHZhbHVlLlxuICAgKi9cbiAgdHlwZTogJ3N0cmluZyc7XG5cbiAgLyoqXG4gICAqIE1heGl1bSBsZW5ndGggZm9yIGEgc3RyaW5nLlxuICAgKiBNdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIuXG4gICAqL1xuICBtYXhMZW5ndGg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1pbmltdW0gbGVuZ3RoIGZvciBhIHN0cmluZy5cbiAgICogTXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLlxuICAgKi9cbiAgbWluTGVuZ3RoPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBQYXR0ZXJuIHRvIG1hdGNoIGZvciBhIHN0cmluZy5cbiAgICogTXVzdCBiZSBhIHZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiwgV0lUSE9VVCB0aGUgLyBkZWxpbWl0ZXJzLlxuICAgKi9cbiAgcGF0dGVybj86IHN0cmluZztcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpTT05TY2hlbWFOdW1lcmljIHtcblxuICB0eXBlOiAnbnVtYmVyJyB8wqAnaW50ZWdlcic7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgbnVtYmVyIGlzIGEgbXVsdGlwbGUgb2YgeC5cbiAgICogTXVzdCBiZSBzdHJpY3RseSBncmVhdGVyIHRoYW4gMC5cbiAgICovXG4gIG11bHRpcGxlT2Y/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgbnVtYmVyIGlzIGxlc3Mgb3IgZXF1YWwgdGhhbiB0aGlzIG1heGltdW0uXG4gICAqL1xuICBtYXhpbXVtPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIG51bWJlciBpcyBzdHJpY3RseSBsZXNzIHRoYW4gdGhpcyBtYXhpbXVtLlxuICAgKi9cbiAgZXhjbHVzaXZlTWF4aW11bT86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBudW1iZXIgaXMgZ3JlYXRlciBvciBlcXVhbCB0aGFuIHRoaXMgbWluaW11bS5cbiAgICovXG4gIG1pbmltdW0/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgbnVtYmVyIGlzIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiB0aGlzIG1pbmltdW0uXG4gICAqL1xuICBleGNsdXNpdmVNaW5pbXVtPzogbnVtYmVyO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSlNPTlNjaGVtYUFycmF5IHtcblxuICAvKipcbiAgICogVHlwZSBmb3IgYW4gYXJyYXkgdmFsdWUuIEF2b2lkIHRvIGV4cGxpY2l0IHRoaXMsIFwiaXRlbXNcIiBpcyBlbm91Z2gsXG4gICAqL1xuICB0eXBlPzogJ2FycmF5JztcblxuICAvKipcbiAgICogU2NoZW1hIGZvciB0aGUgdmFsdWVzIG9mIGFuIGFycmF5LlxuICAgKiAndHlwZScgb2YgdmFsdWVzIHNob3VsZCBiZSBhIHN0cmluZyAobm90IGFuIGFycmF5IG9mIHR5cGUpLlxuICAgKi9cbiAgaXRlbXM6IEpTT05TY2hlbWEgfCBKU09OU2NoZW1hW107XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGFycmF5IGxlbmd0aCBpcyBsZXNzIG9yIGVxdWFsIHRvIHRoaXMgdmFsdWUuXG4gICAqIE11c3QgYmUgYSBub24gbmVnYXRpdmUgaW50ZWdlci5cbiAgICovXG4gIG1heEl0ZW1zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhcnJheSBsZW5ndGggaXMgZ3JlYXRlciBvciBlcXVhbCB0byB0aGlzIHZhbHVlLlxuICAgKiBNdXN0IGJlIGEgbm9uIG5lZ2F0aXZlIGludGVnZXIuXG4gICAqL1xuICBtaW5JdGVtcz86IG51bWJlcjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXJyYXkgb25seSBoYXZlIHVuaXF1ZSB2YWx1ZXMuXG4gICAqL1xuICB1bmlxdWVJdGVtcz86IGJvb2xlYW47XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBKU09OU2NoZW1hT2JqZWN0IHtcblxuICAvKipcbiAgICogVHlwZSBmb3IgYW4gb2JqZWN0IHZhbHVlLiAgQXZvaWQgdG8gZXhwbGljaXQgdGhpcywgXCJwcm9wZXJ0aWVzXCIgaXMgZW5vdWdoLFxuICAgKi9cbiAgdHlwZT86ICdvYmplY3QnO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgc2NoZW1hcyBmb3IgYW4gb2JqZWN0LlxuICAgKi9cbiAgcHJvcGVydGllczoge1xuICAgIFtrOiBzdHJpbmddOiBKU09OU2NoZW1hO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBuYW1lcyBvZiB0aGUgcmVxdWlyZWQgcHJvcGVydGllcyBmb3IgYW4gb2JqZWN0LlxuICAgKiBQcm9wZXJ0aWVzIHNldCBhcyByZXF1aXJlZCBzaG91bGQgYmUgcHJlc2VudCBpbiAncHJvcGVydGllcycgdG9vLlxuICAgKiBOb3RlIHRoYXQgaW4gdGhlIGxhc3Qgc3BlYywgYm9vbGVhbnMgYXJlIG5vdCBzdXBwb3J0ZWQgYW55bW9yZS5cbiAgICovXG4gIHJlcXVpcmVkPzogc3RyaW5nW107XG5cbn1cblxuLyoqXG4gKiBTdWJzZXQgb2YgdGhlIEpTT04gU2NoZW1hLlxuICogVHlwZXMgYXJlIGVuZm9yY2VkIHRvIHZhbGlkYXRlIGV2ZXJ5dGhpbmc6XG4gKiBlYWNoIHZhbHVlIE1VU1QgaGF2ZSBqdXN0IE9ORSBvZiBlaXRoZXIgJ3R5cGUnIG9yICdwcm9wZXJ0aWVzJyBvciAnaXRlbXMnIG9yICdjb25zdCcgb3IgJ2VudW0nLlxuICogVGhlcmVmb3JlLCB1bmxpa2UgdGhlIHNwZWMsIGJvb2xlYW5zIGFyZSBub3QgYWxsb3dlZCBhcyBzY2hlbWFzLlxuICogQHNlZSBodHRwOi8vanNvbi1zY2hlbWEub3JnL2xhdGVzdC9qc29uLXNjaGVtYS12YWxpZGF0aW9uLmh0bWxcbiAqIE5vdCBhbGwgdmFsaWRhdGlvbiBmZWF0dXJlcyBhcmUgc3VwcG9ydGVkOiBqdXN0IGZvbGxvdyB0aGUgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgdHlwZSBKU09OU2NoZW1hID0gKEpTT05TY2hlbWFDb25zdMKgfCBKU09OU2NoZW1hRW51bSB8XG4gIEpTT05TY2hlbWFCb29sZWFuIHwgSlNPTlNjaGVtYU51bGwgfCBKU09OU2NoZW1hU3RyaW5nIHwgSlNPTlNjaGVtYU51bWVyaWMgfFxuICBKU09OU2NoZW1hQXJyYXkgfCBKU09OU2NoZW1hT2JqZWN0KVxuICAmIHsgW2s6IHN0cmluZ106IGFueTsgfTtcbiJdfQ==