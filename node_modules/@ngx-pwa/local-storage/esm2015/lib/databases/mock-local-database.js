/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
export class MockLocalDatabase {
    constructor() {
        this.localStorage = new Map();
    }
    /**
     * @return {?}
     */
    get size() {
        return of(this.localStorage.size);
    }
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem(key) {
        /** @type {?} */
        const rawData = this.localStorage.get(key);
        return of((rawData !== undefined) ? rawData : null);
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        this.localStorage.set(key, data);
        return of(true);
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        this.localStorage.delete(key);
        return of(true);
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        this.localStorage.clear();
        return of(true);
    }
    /**
     * @return {?}
     */
    keys() {
        return of(Array.from(this.localStorage.keys()));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        return of(this.localStorage.has(key));
    }
}
MockLocalDatabase.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ MockLocalDatabase.ngInjectableDef = i0.defineInjectable({ factory: function MockLocalDatabase_Factory() { return new MockLocalDatabase(); }, token: MockLocalDatabase, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    MockLocalDatabase.prototype.localStorage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1sb2NhbC1kYXRhYmFzZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtcHdhL2xvY2FsLXN0b3JhZ2UvIiwic291cmNlcyI6WyJsaWIvZGF0YWJhc2VzL21vY2stbG9jYWwtZGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFPdEMsTUFBTSxPQUFPLGlCQUFpQjtJQUg5QjtRQUtZLGlCQUFZLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztLQXNFakQ7Ozs7SUFwRUMsSUFBSSxJQUFJO1FBQ04sT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7Ozs7O0lBT0EsT0FBTyxDQUFVLEdBQVc7O2NBRXJCLE9BQU8sR0FBYSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFFcEQsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdEQsQ0FBQzs7Ozs7OztJQVFBLE9BQU8sQ0FBQyxHQUFXLEVBQUUsSUFBUztRQUU3QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFakMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbEIsQ0FBQzs7Ozs7O0lBT0EsVUFBVSxDQUFDLEdBQVc7UUFFckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbEIsQ0FBQzs7Ozs7SUFNQSxLQUFLO1FBRUosSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUUxQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQixDQUFDOzs7O0lBRUQsSUFBSTtRQUVGLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFbEQsQ0FBQzs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBVztRQUViLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFeEMsQ0FBQzs7O1lBekVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7SUFHQyx5Q0FBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBMb2NhbERhdGFiYXNlIH0gZnJvbSAnLi9sb2NhbC1kYXRhYmFzZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE1vY2tMb2NhbERhdGFiYXNlIGltcGxlbWVudHMgTG9jYWxEYXRhYmFzZSB7XG5cbiAgcHJvdGVjdGVkIGxvY2FsU3RvcmFnZSA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG5cbiAgZ2V0IHNpemUoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gb2YodGhpcy5sb2NhbFN0b3JhZ2Uuc2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbiBpdGVtIHZhbHVlIGluIGxvY2FsIHN0b3JhZ2VcbiAgICogQHBhcmFtIGtleSBUaGUgaXRlbSdzIGtleVxuICAgKiBAcmV0dXJucyBUaGUgaXRlbSdzIHZhbHVlIGlmIHRoZSBrZXkgZXhpc3RzLCBudWxsIG90aGVyd2lzZSwgd3JhcHBlZCBpbiBhbiBSeEpTIE9ic2VydmFibGVcbiAgICovXG4gICBnZXRJdGVtPFQgPSBhbnk+KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUIHzCoG51bGw+IHtcblxuICAgIGNvbnN0IHJhd0RhdGE6IFQgfCBudWxsID0gdGhpcy5sb2NhbFN0b3JhZ2UuZ2V0KGtleSk7XG5cbiAgICByZXR1cm4gb2YoKHJhd0RhdGEgIT09IHVuZGVmaW5lZCkgPyByYXdEYXRhIDogbnVsbCk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEBwYXJhbSBkYXRhIFRoZSBpdGVtJ3MgdmFsdWUsIG11c3QgTk9UIGJlIG51bGwgb3IgdW5kZWZpbmVkXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgdGhpcy5sb2NhbFN0b3JhZ2Uuc2V0KGtleSwgZGF0YSk7XG5cbiAgICByZXR1cm4gb2YodHJ1ZSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGl0ZW0gaW4gbG9jYWwgc3RvcmFnZVxuICAgKiBAcGFyYW0ga2V5IFRoZSBpdGVtJ3Mga2V5XG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIHRoaXMubG9jYWxTdG9yYWdlLmRlbGV0ZShrZXkpO1xuXG4gICAgcmV0dXJuIG9mKHRydWUpO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgaXRlbXMgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAqIEByZXR1cm5zIEFuIFJ4SlMgT2JzZXJ2YWJsZSB0byB3YWl0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgIGNsZWFyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgdGhpcy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcblxuICAgIHJldHVybiBvZih0cnVlKTtcblxuICB9XG5cbiAga2V5cygpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPiB7XG5cbiAgICByZXR1cm4gb2YoQXJyYXkuZnJvbSh0aGlzLmxvY2FsU3RvcmFnZS5rZXlzKCkpKTtcblxuICB9XG5cbiAgaGFzKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICByZXR1cm4gb2YodGhpcy5sb2NhbFN0b3JhZ2UuaGFzKGtleSkpO1xuXG4gIH1cblxufVxuIl19