/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, Inject } from '@angular/core';
import { ReplaySubject, fromEvent, of, throwError, race } from 'rxjs';
import { map, mergeMap, first, tap } from 'rxjs/operators';
import { LocalStorageDatabase } from './localstorage-database';
import { LOCAL_STORAGE_PREFIX } from '../tokens';
import * as i0 from "@angular/core";
import * as i1 from "../tokens";
export class IndexedDBDatabase {
    /**
     * Connects to IndexedDB
     * @param {?=} prefix
     */
    constructor(prefix = null) {
        this.prefix = prefix;
        /**
         * IndexedDB database name for local storage
         */
        this.dbName = 'ngStorage';
        /**
         * IndexedDB object store name for local storage
         */
        this.objectStoreName = 'localStorage';
        /**
         * IndexedDB key path name for local storage (where an item's key will be stored)
         */
        this.keyPath = 'key';
        /**
         * IndexedDB data path name for local storage (where items' value will be stored)
         */
        this.dataPath = 'value';
        /**
         * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),
         * so a fallback can be needed.
         */
        this.fallback = null;
        if (prefix) {
            this.dbName = `${prefix}_${this.dbName}`;
        }
        /* Creating the RxJS ReplaySubject */
        this.database = new ReplaySubject();
        /* Connecting to IndexedDB */
        this.connect(prefix);
    }
    /**
     * @return {?}
     */
    get size() {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.size;
        }
        return this.transaction('readonly').pipe(mergeMap((transaction) => {
            /* Deleting the item in local storage */
            /** @type {?} */
            const request = transaction.count();
            /** @type {?} */
            const success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map((event) => (/** @type {?} */ (((/** @type {?} */ (event.target))).result))));
            /* Merging success and errors events and autoclosing the observable */
            return ((/** @type {?} */ (race(success, this.toErrorObservable(request, `length`)))));
        }), first());
    }
    /**
     * Gets an item value in local storage
     * @template T
     * @param {?} key The item's key
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem(key) {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.getItem(key);
        }
        /* Opening a trasaction and requesting the item in local storage */
        return this.getItemFromTransaction(key);
    }
    /**
     * Internal method to factorize the getter for getItem and setItem,
     * the last one needing to be from a preexisting transaction
     * @private
     * @template T
     * @param {?} key The item's key
     * @param {?=} transactionParam Optional pre-existing transaction to use for the read request
     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItemFromTransaction(key, transactionParam) {
        /** @type {?} */
        const transaction$ = transactionParam ? of(transactionParam) : this.transaction();
        return transaction$.pipe(map((transaction) => transaction.get(key)), mergeMap((request) => {
            /* Listening to the success event, and passing the item value if found, null otherwise */
            /** @type {?} */
            const success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map((event) => ((/** @type {?} */ (event.target))).result), map((result) => result && (this.dataPath in result) ? ((/** @type {?} */ (result[this.dataPath]))) : null));
            /* Merging success and errors events and autoclosing the observable */
            return (race(success, this.toErrorObservable(request, `getter`)));
        }), first());
    }
    /**
     * Sets an item in local storage
     * @param {?} key The item's key
     * @param {?} data The item's value, must NOT be null or undefined
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    setItem(key, data) {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.setItem(key, data);
        }
        /* Storing null is not correctly supported by IndexedDB and unnecessary here */
        if (data == null) {
            return of(true);
        }
        /* Transaction must be the same for read and write, to avoid concurrency issues */
        /** @type {?} */
        const transaction$ = this.transaction('readwrite');
        /** @type {?} */
        let transaction;
        /* Opening a transaction */
        return transaction$.pipe(tap((value) => {
            transaction = value;
        }), 
        /* Check if the key already exists or not */
        mergeMap(() => this.getItemFromTransaction(key, transaction)), map((existingData) => (existingData == null) ? 'add' : 'put'), mergeMap((method) => {
            /** @type {?} */
            let request;
            /* Adding or updating local storage, based on previous checking */
            switch (method) {
                case 'add':
                    request = transaction.add({ [this.dataPath]: data }, key);
                    break;
                case 'put':
                default:
                    request = transaction.put({ [this.dataPath]: data }, key);
                    break;
            }
            /* Merging success (passing true) and error events and autoclosing the observable */
            return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `setter`)));
        }), first());
    }
    /**
     * Deletes an item in local storage
     * @param {?} key The item's key
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    removeItem(key) {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.removeItem(key);
        }
        /* Opening a transaction and checking if the item exists in local storage */
        return this.getItem(key).pipe(mergeMap((data) => {
            /* If the item exists in local storage */
            if (data != null) {
                /* Opening a transaction */
                return this.transaction('readwrite').pipe(mergeMap((transaction) => {
                    /* Deleting the item in local storage */
                    /** @type {?} */
                    const request = transaction.delete(key);
                    /* Merging success (passing true) and error events and autoclosing the observable */
                    return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `remover`)));
                }));
            }
            /* Passing true if the item does not exist in local storage */
            return of(true);
        }), first());
    }
    /**
     * Deletes all items from local storage
     * @return {?} An RxJS Observable to wait the end of the operation
     */
    clear() {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.clear();
        }
        /* Opening a transaction */
        return this.transaction('readwrite').pipe(mergeMap((transaction) => {
            /* Deleting all items from local storage */
            /** @type {?} */
            const request = transaction.clear();
            /* Merging success (passing true) and error events and autoclosing the observable */
            return (race(this.toSuccessObservable(request), this.toErrorObservable(request, `clearer`)));
        }), first());
    }
    /**
     * @return {?}
     */
    keys() {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.keys();
        }
        return this.transaction('readonly').pipe(mergeMap((transaction) => {
            /* Deleting the item in local storage */
            /** @type {?} */
            const request = transaction.getAllKeys();
            /** @type {?} */
            const success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map((event) => (/** @type {?} */ (((/** @type {?} */ (event.target))).result))));
            /* Merging success and errors events and autoclosing the observable */
            return (race(success, this.toErrorObservable(request, `keys`)));
        }), first());
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        /* Fallback storage if set */
        if (this.fallback) {
            return this.fallback.has(key);
        }
        return this.transaction('readonly').pipe(map((transaction) => transaction.getKey(key)), mergeMap((request) => {
            /* Listening to the success event, and passing the item value if found, null otherwise */
            /** @type {?} */
            const success = ((/** @type {?} */ (fromEvent(request, 'success')))).pipe(map((event) => ((/** @type {?} */ (event.target))).result), map((result) => (result !== undefined) ? true : false));
            /* Merging success and errors events and autoclosing the observable */
            return (race(success, this.toErrorObservable(request, `has`)));
        }), first());
    }
    /**
     * Connects to IndexedDB and creates the object store on first time
     * @protected
     * @param {?=} prefix
     * @return {?}
     */
    connect(prefix = null) {
        /** @type {?} */
        let request;
        /* Connecting to IndexedDB */
        try {
            request = indexedDB.open(this.dbName);
        }
        catch (error) {
            /* Fallback storage if IndexedDb connection is failing */
            this.setFallback(prefix);
            return;
        }
        /* Listening the event fired on first connection, creating the object store for local storage */
        ((/** @type {?} */ (fromEvent(request, 'upgradeneeded'))))
            .pipe(first())
            .subscribe((event) => {
            /* Getting the database connection */
            /** @type {?} */
            const database = (/** @type {?} */ (((/** @type {?} */ (event.target))).result));
            /* Checking if the object store already exists, to avoid error */
            if (!database.objectStoreNames.contains(this.objectStoreName)) {
                /* Creating the object store for local storage */
                database.createObjectStore(this.objectStoreName);
            }
        });
        /* Listening the success event and converting to an RxJS Observable */
        /** @type {?} */
        const success = (/** @type {?} */ (fromEvent(request, 'success')));
        /* Merging success and errors events */
        ((/** @type {?} */ (race(success, this.toErrorObservable(request, `connection`)))))
            .pipe(first())
            .subscribe((event) => {
            /* Storing the database connection for further access */
            this.database.next((/** @type {?} */ (((/** @type {?} */ (event.target))).result)));
        }, () => {
            /* Fallback storage if IndexedDb connection is failing */
            this.setFallback(prefix);
        });
    }
    /**
     * Opens an IndexedDB transaction and gets the local storage object store
     * @protected
     * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations
     * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable
     */
    transaction(mode = 'readonly') {
        /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */
        return this.database
            .pipe(map((database) => database.transaction([this.objectStoreName], mode).objectStore(this.objectStoreName)));
    }
    /**
     * Transforms a IndexedDB success event in an RxJS Observable
     * @protected
     * @param {?} request The request to listen
     * @return {?} A RxJS Observable with true value
     */
    toSuccessObservable(request) {
        /* Transforming a IndexedDB success event in an RxJS Observable with true value */
        return ((/** @type {?} */ (fromEvent(request, 'success'))))
            .pipe(map(() => true));
    }
    /**
     * Transforms a IndexedDB error event in an RxJS ErrorObservable
     * @protected
     * @param {?} request The request to listen
     * @param {?=} error Optionnal details about the error's origin
     * @return {?} A RxJS ErrorObservable
     */
    toErrorObservable(request, error = ``) {
        /* Transforming a IndexedDB error event in an RxJS ErrorObservable */
        return ((/** @type {?} */ (fromEvent(request, 'error'))))
            .pipe(mergeMap(() => throwError(new Error(`IndexedDB ${error} issue : ${((/** @type {?} */ (request.error))).message}.`))));
    }
    /**
     * @protected
     * @param {?} prefix
     * @return {?}
     */
    setFallback(prefix) {
        this.fallback = new LocalStorageDatabase(prefix);
    }
}
IndexedDBDatabase.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IndexedDBDatabase.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOCAL_STORAGE_PREFIX,] }] }
];
/** @nocollapse */ IndexedDBDatabase.ngInjectableDef = i0.defineInjectable({ factory: function IndexedDBDatabase_Factory() { return new IndexedDBDatabase(i0.inject(i1.LOCAL_STORAGE_PREFIX, 8)); }, token: IndexedDBDatabase, providedIn: "root" });
if (false) {
    /**
     * IndexedDB database name for local storage
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.dbName;
    /**
     * IndexedDB object store name for local storage
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.objectStoreName;
    /**
     * IndexedDB key path name for local storage (where an item's key will be stored)
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.keyPath;
    /**
     * IndexedDB data path name for local storage (where items' value will be stored)
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.dataPath;
    /**
     * IndexedDB database connection, wrapped in a RxJS ReplaySubject to be able to access the connection
     * even after the connection success event happened
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.database;
    /**
     * IndexedDB is available but failing in some scenarios (Firefox private mode, Safari cross-origin iframes),
     * so a fallback can be needed.
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.fallback;
    /**
     * @type {?}
     * @protected
     */
    IndexedDBDatabase.prototype.prefix;
}
//# sourceMappingURL=data:application/json;base64,