import { Observable } from 'rxjs';
import { LocalDatabase } from './databases/local-database';
import { JSONSchema } from './validation/json-schema';
import { JSONValidator } from './validation/json-validator';
export interface LSGetItemOptions {
    schema?: JSONSchema | null;
}
export declare class LocalStorage {
    protected database: LocalDatabase;
    protected jsonValidator: JSONValidator;
    /**
     * Number of items in the storage
     */
    readonly size: Observable<number>;
    protected readonly getItemOptionsDefault: LSGetItemOptions;
    constructor(database: LocalDatabase, jsonValidator: JSONValidator);
    /**
     * Gets an item value in local storage
     * @param key The item's key
     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getItem<T = any>(key: string, options: LSGetItemOptions & {
        schema: JSONSchema;
    }): Observable<T | null>;
    getItem<T = any>(key: string, options?: LSGetItemOptions): Observable<unknown>;
    /**
     * Gets an item value in local storage WITHOUT any validation.
     * It is a convenience method for development only: do NOT use it in production code,
     * as it can cause security issues and errors and may be removed in future versions.
     * Use the normal .getItem() method instead.
     * @ignore
     * @deprecated
     * @param key The item's key
     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable
     */
    getUnsafeItem<T = any>(key: string): Observable<T | null>;
    /**
     * Sets an item in local storage
     * @param key The item's key
     * @param data The item's value, must NOT be null or undefined
     * @returns An RxJS Observable to wait the end of the operation
     */
    setItem(key: string, data: any): Observable<boolean>;
    /**
     * Deletes an item in local storage
     * @param key The item's key
     * @returns An RxJS Observable to wait the end of the operation
     */
    removeItem(key: string): Observable<boolean>;
    /**
     * Deletes all items from local storage
     * @returns An RxJS Observable to wait the end of the operation
     */
    clear(): Observable<boolean>;
    /**
     * Get all keys stored in local storage
     * @returns A RxJS Observable returning an array of the indexes
     */
    keys(): Observable<string[]>;
    /**
     * Tells if a key exists in storage
     * @returns A RxJS Observable telling if the key exists
     */
    has(key: string): Observable<boolean>;
    /**
     * Sets an item in local storage, and auto-subscribes
     * @param key The item's key
     * @param data The item's value, must NOT be null or undefined
     */
    setItemSubscribe(key: string, data: any): void;
    /**
     * Deletes an item in local storage, and auto-subscribes
     * @param key The item's key
     */
    removeItemSubscribe(key: string): void;
    /** Deletes all items from local storage, and auto-subscribes */
    clearSubscribe(): void;
}
